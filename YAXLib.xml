<?xml version="1.0"?>
<doc>
    <assembly>
        <name>YAXLib</name>
    </assembly>
    <members>
        <member name="T:YAXLib.IYaxMemberLevelAttribute">
            <summary>
            Attributes used on member-level must implement this interface.
            </summary>
        </member>
        <member name="M:YAXLib.IYaxMemberLevelAttribute.Setup(YAXLib.MemberWrapper)">
            <summary>
            The method is invoked by <see cref="T:YAXLib.MemberWrapper" />.
            Initial, attribute-specific properties for <see cref="T:YAXLib.MemberWrapper" /> will be set.
            </summary>
            <param name="memberWrapper"></param>
        </member>
        <member name="T:YAXLib.IYaxTypeLevelAttribute">
            <summary>
            Attributes used on type-level must implement this interface.
            </summary>
        </member>
        <member name="M:YAXLib.IYaxTypeLevelAttribute.Setup(YAXLib.UdtWrapper)">
            <summary>
            The method is invoked by <see cref="T:YAXLib.UdtWrapper" />.
            Initial, attribute-specific properties for <see cref="T:YAXLib.UdtWrapper" /> will be set.
            </summary>
            <param name="udtWrapper"></param>
        </member>
        <member name="T:YAXLib.Attributes.YAXAttributeForAttribute">
            <summary>
            Makes a field or property to appear as an attribute for another element, if possible.
            This attribute is applicable to fields and properties.
            </summary>
        </member>
        <member name="M:YAXLib.Attributes.YAXAttributeForAttribute.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:YAXLib.Attributes.YAXAttributeForAttribute" /> class.
            </summary>
            <param name="parent">The element of which the property becomes an attribute.</param>
        </member>
        <member name="P:YAXLib.Attributes.YAXAttributeForAttribute.Parent">
            <summary>
            Gets or sets the element of which the property becomes an attribute.
            </summary>
        </member>
        <member name="M:YAXLib.Attributes.YAXAttributeForAttribute.YAXLib#IYaxMemberLevelAttribute#Setup(YAXLib.MemberWrapper)">
            <inheritdoc />
        </member>
        <member name="T:YAXLib.Attributes.YAXAttributeForClassAttribute">
            <summary>
            Makes a property to appear as an attribute for the enclosing class (i.e. the parent element) if possible.
            This attribute is applicable to fields and properties only.
            </summary>
        </member>
        <member name="M:YAXLib.Attributes.YAXAttributeForClassAttribute.YAXLib#IYaxMemberLevelAttribute#Setup(YAXLib.MemberWrapper)">
            <inheritdoc />
        </member>
        <member name="T:YAXLib.Attributes.YAXBaseAttribute">
            <summary>
            The base class for all attributes defined in YAXLib.
            </summary>
        </member>
        <member name="T:YAXLib.Attributes.YAXCollectionAttribute">
            <summary>
            Controls the serialization of collection instances.
            This attribute is applicable to fields and properties, and collection classes.
            </summary>
        </member>
        <member name="M:YAXLib.Attributes.YAXCollectionAttribute.#ctor(YAXLib.Enums.YAXCollectionSerializationTypes)">
            <summary>
            Initializes a new instance of the <see cref="T:YAXLib.Attributes.YAXCollectionAttribute" /> class.
            </summary>
            <param name="serType">type of the serialization of the collection.</param>
        </member>
        <member name="P:YAXLib.Attributes.YAXCollectionAttribute.SerializationType">
            <summary>
            Gets or sets the type of the serialization of the collection.
            </summary>
            <value>The type of the serialization of the collection.</value>
        </member>
        <member name="P:YAXLib.Attributes.YAXCollectionAttribute.SeparateBy">
            <summary>
            Gets or sets the string to separate collection items, if the Serialization type is set to <c>Serially</c>.
            </summary>
            <value>the string to separate collection items, if the Serialization Type is set to <c>Serially</c>.</value>
        </member>
        <member name="P:YAXLib.Attributes.YAXCollectionAttribute.EachElementName">
            <summary>
            Gets or sets the name of each child element corresponding to the collection members, if the Serialization type is
            set to <c>Recursive</c>.
            </summary>
            <value>
            The name of each child element corresponding to the collection members, if the Serialization type is set to
            <c>Recursive</c>.
            </value>
        </member>
        <member name="P:YAXLib.Attributes.YAXCollectionAttribute.IsWhiteSpaceSeparator">
            <summary>
            Gets or sets a value indicating whether white space characters are to be
            treated as separators or not.
            </summary>
            <value>
            <c>true</c> if white space separator characters are to be
            treated as separators; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="M:YAXLib.Attributes.YAXCollectionAttribute.YAXLib#IYaxMemberLevelAttribute#Setup(YAXLib.MemberWrapper)">
            <inheritdoc />
        </member>
        <member name="M:YAXLib.Attributes.YAXCollectionAttribute.YAXLib#IYaxTypeLevelAttribute#Setup(YAXLib.UdtWrapper)">
            <inheritdoc />
        </member>
        <member name="M:YAXLib.Attributes.YAXCollectionItemTypeAttribute.YAXLib#IYaxMemberLevelAttribute#Setup(YAXLib.MemberWrapper)">
            <inheritdoc />
        </member>
        <member name="T:YAXLib.Attributes.YAXCommentAttribute">
            <summary>
            Creates a comment node per each line of the comment string provided.
            This attribute is applicable to classes, structures, fields, and properties.
            </summary>
        </member>
        <member name="M:YAXLib.Attributes.YAXCommentAttribute.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:YAXLib.Attributes.YAXCommentAttribute" /> class.
            </summary>
            <param name="comment">The comment.</param>
        </member>
        <member name="P:YAXLib.Attributes.YAXCommentAttribute.Comment">
            <summary>
            Gets or sets the comment.
            </summary>
            <value>The comment.</value>
        </member>
        <member name="M:YAXLib.Attributes.YAXCommentAttribute.YAXLib#IYaxMemberLevelAttribute#Setup(YAXLib.MemberWrapper)">
            <inheritdoc />
        </member>
        <member name="M:YAXLib.Attributes.YAXCommentAttribute.YAXLib#IYaxTypeLevelAttribute#Setup(YAXLib.UdtWrapper)">
            <inheritdoc />
        </member>
        <member name="T:YAXLib.Attributes.YAXCustomSerializerAttribute">
            <summary>
            Specifies a custom serializer class for a field, property, class, or struct. YAXLib will instantiate an object
            from the specified type in this attribute, and calls appropriate methods while serializing.
            This attribute is applicable to fields, properties, classes, and structs.
            </summary>
        </member>
        <member name="M:YAXLib.Attributes.YAXCustomSerializerAttribute.#ctor(System.Type)">
            <summary>
            Initializes a new instance of the <see cref="T:YAXLib.Attributes.YAXCustomSerializerAttribute" /> class.
            </summary>
            <param name="customSerializerType">Type of the custom serializer.</param>
        </member>
        <member name="P:YAXLib.Attributes.YAXCustomSerializerAttribute.CustomSerializerType">
            <summary>
            Gets or sets the type of the custom serializer.
            </summary>
            <value>The type of the custom serializer.</value>
        </member>
        <member name="M:YAXLib.Attributes.YAXCustomSerializerAttribute.YAXLib#IYaxMemberLevelAttribute#Setup(YAXLib.MemberWrapper)">
            <inheritdoc />
        </member>
        <member name="M:YAXLib.Attributes.YAXCustomSerializerAttribute.YAXLib#IYaxTypeLevelAttribute#Setup(YAXLib.UdtWrapper)">
            <inheritdoc />
        </member>
        <member name="T:YAXLib.Attributes.YAXDictionaryAttribute">
            <summary>
            Controls the serialization of generic Dictionary instances.
            This attribute is applicable to fields and properties, and
            classes derived from the <c>Dictionary</c> base class.
            </summary>
        </member>
        <member name="M:YAXLib.Attributes.YAXDictionaryAttribute.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:YAXLib.Attributes.YAXDictionaryAttribute" /> class.
            </summary>
        </member>
        <member name="P:YAXLib.Attributes.YAXDictionaryAttribute.KeyName">
            <summary>
            Gets or sets the alias for the key part of the dictionary.
            </summary>
            <value></value>
        </member>
        <member name="P:YAXLib.Attributes.YAXDictionaryAttribute.ValueName">
            <summary>
            Gets or sets alias for the value part of the dictionary.
            </summary>
            <value></value>
        </member>
        <member name="P:YAXLib.Attributes.YAXDictionaryAttribute.EachPairName">
            <summary>
            Gets or sets alias for the element containing the Key-Value pair.
            </summary>
            <value></value>
        </member>
        <member name="P:YAXLib.Attributes.YAXDictionaryAttribute.SerializeKeyAs">
            <summary>
            Gets or sets the node type according to which the key part of the dictionary is serialized.
            </summary>
            <value></value>
        </member>
        <member name="P:YAXLib.Attributes.YAXDictionaryAttribute.SerializeValueAs">
            <summary>
            Gets or sets the node type according to which the value part of the dictionary is serialized.
            </summary>
            <value></value>
        </member>
        <member name="P:YAXLib.Attributes.YAXDictionaryAttribute.KeyFormatString">
            <summary>
            Gets or sets the key format string.
            </summary>
            <value></value>
        </member>
        <member name="P:YAXLib.Attributes.YAXDictionaryAttribute.ValueFormatString">
            <summary>
            Gets or sets the value format string.
            </summary>
            <value></value>
        </member>
        <member name="M:YAXLib.Attributes.YAXDictionaryAttribute.YAXLib#IYaxMemberLevelAttribute#Setup(YAXLib.MemberWrapper)">
            <inheritdoc />
        </member>
        <member name="M:YAXLib.Attributes.YAXDictionaryAttribute.YAXLib#IYaxTypeLevelAttribute#Setup(YAXLib.UdtWrapper)">
            <inheritdoc />
        </member>
        <member name="T:YAXLib.Attributes.YAXDontSerializeAttribute">
            <summary>
            Prevents serialization of some field or property.
            This attribute is applicable to fields and properties.
            </summary>
        </member>
        <member name="M:YAXLib.Attributes.YAXDontSerializeAttribute.YAXLib#IYaxMemberLevelAttribute#Setup(YAXLib.MemberWrapper)">
            <inheritdoc />
        </member>
        <member name="T:YAXLib.Attributes.YAXDontSerializeIfNullAttribute">
            <summary>
            Prevents serialization of fields or properties when their value is null.
            This attribute is applicable to fields and properties.
            </summary>
        </member>
        <member name="M:YAXLib.Attributes.YAXDontSerializeIfNullAttribute.YAXLib#IYaxMemberLevelAttribute#Setup(YAXLib.MemberWrapper)">
            <inheritdoc />
        </member>
        <member name="T:YAXLib.Attributes.YAXElementForAttribute">
            <summary>
            Makes a property or field to appear as a child element
            for another element. This attribute is applicable to fields and properties.
            </summary>
        </member>
        <member name="M:YAXLib.Attributes.YAXElementForAttribute.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:YAXLib.Attributes.YAXElementForAttribute" /> class.
            </summary>
            <param name="parent">The element of which the property becomes a child element.</param>
        </member>
        <member name="P:YAXLib.Attributes.YAXElementForAttribute.Parent">
            <summary>
            Gets or sets the element of which the property becomes a child element.
            </summary>
            <value>The element of which the property becomes a child element.</value>
        </member>
        <member name="M:YAXLib.Attributes.YAXElementForAttribute.YAXLib#IYaxMemberLevelAttribute#Setup(YAXLib.MemberWrapper)">
            <inheritdoc />
        </member>
        <member name="T:YAXLib.Attributes.YAXElementOrder">
            <summary>
            Specifies the order upon which a field or property is serialized / deserialized.
            </summary>
        </member>
        <member name="M:YAXLib.Attributes.YAXElementOrder.#ctor(System.Int32)">
            <summary>
            Initializes a new instance of the <see cref="T:YAXLib.Attributes.YAXElementOrder" /> class.
            </summary>
            <remarks>
            The element this applies to will be given priority in being serialized or deserialized
            depending on the relative value compared to other child elements.
            </remarks>
            <param name="order">The priority of the element in serializing and deserializing.</param>
        </member>
        <member name="P:YAXLib.Attributes.YAXElementOrder.Order">
            <summary>
            The order used to prioritize serialization and deserialization.
            </summary>
        </member>
        <member name="M:YAXLib.Attributes.YAXElementOrder.YAXLib#IYaxMemberLevelAttribute#Setup(YAXLib.MemberWrapper)">
            <inheritdoc />
        </member>
        <member name="T:YAXLib.Attributes.YAXEnumAttribute">
            <summary>
            Specifies an alias for an enum member.
            This attribute is applicable to enum members.
            </summary>
        </member>
        <member name="M:YAXLib.Attributes.YAXEnumAttribute.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:YAXLib.Attributes.YAXEnumAttribute" /> class.
            </summary>
            <param name="alias">The alias.</param>
        </member>
        <member name="P:YAXLib.Attributes.YAXEnumAttribute.Alias">
            <summary>
            Gets the alias for the enum member.
            </summary>
            <value>The alias for the enum member.</value>
        </member>
        <member name="T:YAXLib.Attributes.YAXErrorIfMissedAttribute">
            <summary>
            Specifies the behavior of the deserialization method, if the element/attribute corresponding to this property is
            missed in the XML input.
            This attribute is applicable to fields and properties.
            </summary>
        </member>
        <member name="M:YAXLib.Attributes.YAXErrorIfMissedAttribute.#ctor(YAXLib.Enums.YAXExceptionTypes)">
            <summary>
            Initializes a new instance of the <see cref="T:YAXLib.Attributes.YAXErrorIfMissedAttribute" /> class.
            </summary>
            <param name="treatAs">The value indicating this situation is going to be treated as Error or Warning.</param>
        </member>
        <member name="P:YAXLib.Attributes.YAXErrorIfMissedAttribute.TreatAs">
            <summary>
            Gets or sets the value indicating this situation is going to be treated as Error or Warning.
            </summary>
            <value>The value indicating this situation is going to be treated as Error or Warning.</value>
        </member>
        <member name="P:YAXLib.Attributes.YAXErrorIfMissedAttribute.DefaultValue">
            <summary>
            Gets or sets the default value for the property if the element/attribute corresponding to this property is missed
            in the XML input.
            Setting <c>null</c> means do nothing.
            </summary>
            <value>The default value.</value>
        </member>
        <member name="M:YAXLib.Attributes.YAXErrorIfMissedAttribute.YAXLib#IYaxMemberLevelAttribute#Setup(YAXLib.MemberWrapper)">
            <inheritdoc />
        </member>
        <member name="T:YAXLib.Attributes.YAXFormatAttribute">
            <summary>
            Specifies the format string provided for serializing data. The format string is the parameter
            passed to the <c>ToString</c> method.
            If this attribute is applied to collection classes, the format, therefore, is applied to
            the collection members.
            This attribute is applicable to fields and properties.
            </summary>
        </member>
        <member name="M:YAXLib.Attributes.YAXFormatAttribute.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:YAXLib.Attributes.YAXFormatAttribute" /> class.
            </summary>
            <param name="format">The format string.</param>
        </member>
        <member name="P:YAXLib.Attributes.YAXFormatAttribute.Format">
            <summary>
            Gets or sets the format string needed to serialize data. The format string is the parameter
            passed to the <c>ToString</c> method.
            </summary>
            <value></value>
        </member>
        <member name="M:YAXLib.Attributes.YAXFormatAttribute.YAXLib#IYaxMemberLevelAttribute#Setup(YAXLib.MemberWrapper)">
            <inheritdoc />
        </member>
        <member name="T:YAXLib.Attributes.YAXNamespaceAttribute">
            <summary>
            Makes an element make use of a specific XML namespace.
            This attribute is applicable to classes, structs, fields, enums and properties
            </summary>
        </member>
        <member name="M:YAXLib.Attributes.YAXNamespaceAttribute.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:YAXLib.Attributes.YAXNamespaceAttribute" /> class.
            </summary>
            <remarks>
            The element this applies to will take on the given XML namespace. In the case
            of this constructor, the default one defined by xmlns="namespace"
            </remarks>
            <param name="defaultNamespace">The default namespace to use for this item</param>
        </member>
        <member name="M:YAXLib.Attributes.YAXNamespaceAttribute.#ctor(System.String,System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:YAXLib.Attributes.YAXNamespaceAttribute" /> class.
            </summary>
            <remarks>
            The element this applies to will take on the given XML namespace. The namespace
            will be added to the root XML element, with the given prefix in the form:
            xmlns:prefix="namespace"
            </remarks>
            <param name="namespacePrefix">The prefix to use for this element's namespace</param>
            <param name="xmlNamespace">The xml namespace to use for this item</param>
        </member>
        <member name="P:YAXLib.Attributes.YAXNamespaceAttribute.Namespace">
            <summary>
            The namespace path
            </summary>
        </member>
        <member name="P:YAXLib.Attributes.YAXNamespaceAttribute.Prefix">
            <summary>
            The xml prefix used for the namespace
            </summary>
        </member>
        <member name="M:YAXLib.Attributes.YAXNamespaceAttribute.YAXLib#IYaxMemberLevelAttribute#Setup(YAXLib.MemberWrapper)">
            <inheritdoc />
        </member>
        <member name="M:YAXLib.Attributes.YAXNamespaceAttribute.YAXLib#IYaxTypeLevelAttribute#Setup(YAXLib.UdtWrapper)">
            <inheritdoc />
        </member>
        <member name="T:YAXLib.Attributes.YAXNotCollectionAttribute">
            <summary>
            Specifies that a particular class, or a particular property or variable type, that is
            driven from <c>IEnumerable</c> should not be treated as a collection class/object.
            This attribute is applicable to fields, properties, classes, and structs.
            </summary>
        </member>
        <member name="M:YAXLib.Attributes.YAXNotCollectionAttribute.YAXLib#IYaxMemberLevelAttribute#Setup(YAXLib.MemberWrapper)">
            <inheritdoc />
        </member>
        <member name="M:YAXLib.Attributes.YAXNotCollectionAttribute.YAXLib#IYaxTypeLevelAttribute#Setup(YAXLib.UdtWrapper)">
            <inheritdoc />
        </member>
        <member name="T:YAXLib.Attributes.YAXPreserveWhitespaceAttribute">
            <summary>
            Adds the attribute xml:space="preserve" to the serialized element, so that the deserializer would
            preserve all whitespace characters for the string values.
            Add this attribute to any string field that you want their whitespace be preserved during
            deserialization, or add it to the containing class to be applied to all its fields and properties.
            </summary>
        </member>
        <member name="M:YAXLib.Attributes.YAXPreserveWhitespaceAttribute.YAXLib#IYaxMemberLevelAttribute#Setup(YAXLib.MemberWrapper)">
            <inheritdoc />
        </member>
        <member name="M:YAXLib.Attributes.YAXPreserveWhitespaceAttribute.YAXLib#IYaxTypeLevelAttribute#Setup(YAXLib.UdtWrapper)">
            <inheritdoc />
        </member>
        <member name="T:YAXLib.Attributes.YAXSerializableFieldAttribute">
            <summary>
            Add this attribute to properties or fields which you wish to be serialized, when
            the enclosing class uses the <c>YAXSerializableType</c> attribute in which <c>FieldsToSerialize</c>
            has been set to <c>AttributedFieldsOnly</c>.
            This attribute is applicable to fields and properties.
            </summary>
        </member>
        <member name="M:YAXLib.Attributes.YAXSerializableFieldAttribute.YAXLib#IYaxMemberLevelAttribute#Setup(YAXLib.MemberWrapper)">
            <inheritdoc />
        </member>
        <member name="T:YAXLib.Attributes.YAXSerializableTypeAttribute">
            <summary>
            Add this attribute to types, structs or classes which you want to override
            their default serialization behaviour. This attribute is optional.
            This attribute is applicable to classes and structures.
            </summary>
        </member>
        <member name="M:YAXLib.Attributes.YAXSerializableTypeAttribute.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:YAXLib.Attributes.YAXSerializableTypeAttribute" /> class.
            </summary>
        </member>
        <member name="M:YAXLib.Attributes.YAXSerializableTypeAttribute.IsSerializationOptionSet">
            <summary>
            Determines whether the serialization options property has been explicitly
            set by the user.
            </summary>
            <returns>
            <c>true</c> if the serialization options property has been explicitly
            set by the user; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="F:YAXLib.Attributes.YAXSerializableTypeAttribute._isOptionSet">
            <summary>
            determines whether the serialization options property has been explicitly
            set by the user.
            </summary>
        </member>
        <member name="F:YAXLib.Attributes.YAXSerializableTypeAttribute._serializationOptions">
            <summary>
            Private variable to hold the serialization options
            </summary>
        </member>
        <member name="P:YAXLib.Attributes.YAXSerializableTypeAttribute.FieldsToSerialize">
            <summary>
            Gets or sets the fields which YAXLib selects for serialization
            </summary>
            <value>The fields to serialize.</value>
        </member>
        <member name="P:YAXLib.Attributes.YAXSerializableTypeAttribute.Options">
            <summary>
            Gets or sets the serialization options.
            </summary>
            <value>The options.</value>
        </member>
        <member name="P:YAXLib.Attributes.YAXSerializableTypeAttribute.IncludePrivateMembersFromBaseTypes">
            <summary>
            If set to <see langword="true" />, private fields from <see cref="P:System.Type.BaseType" />s
            can be searched for fields to serialize. Default is <see langword="false" />.
            </summary>
        </member>
        <member name="M:YAXLib.Attributes.YAXSerializableTypeAttribute.YAXLib#IYaxTypeLevelAttribute#Setup(YAXLib.UdtWrapper)">
            <inheritdoc />
        </member>
        <member name="T:YAXLib.Attributes.YAXSerializeAsAttribute">
            <summary>
            Defines an alias for the field, property, class, or struct under
            which it will be serialized. This attribute is applicable to fields,
            properties, classes, and structs.
            </summary>
        </member>
        <member name="M:YAXLib.Attributes.YAXSerializeAsAttribute.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:YAXLib.Attributes.YAXSerializeAsAttribute" /> class.
            </summary>
            <param name="serializeAs">the alias for the property under which the property will be serialized.</param>
        </member>
        <member name="P:YAXLib.Attributes.YAXSerializeAsAttribute.SerializeAs">
            <summary>
            Gets or sets the alias for the property under which the property will be serialized.
            </summary>
        </member>
        <member name="M:YAXLib.Attributes.YAXSerializeAsAttribute.YAXLib#IYaxMemberLevelAttribute#Setup(YAXLib.MemberWrapper)">
            <inheritdoc />
        </member>
        <member name="M:YAXLib.Attributes.YAXSerializeAsAttribute.YAXLib#IYaxTypeLevelAttribute#Setup(YAXLib.UdtWrapper)">
            <inheritdoc />
        </member>
        <member name="T:YAXLib.Attributes.YAXTextEmbeddingAttribute">
            <summary>
            Specifies how to de/serialize a string value.
            </summary>
        </member>
        <member name="M:YAXLib.Attributes.YAXTextEmbeddingAttribute.#ctor(YAXLib.Enums.TextEmbedding)">
            <summary>
            Determines how to embed a value of an XML <see cref="T:System.Xml.Linq.XElement" /> or <see cref="T:System.Xml.Linq.XAttribute" />.
            </summary>
            <param name="embedding">
            The kind of <see cref="T:YAXLib.Enums.TextEmbedding" /> to use for the value.
            The attribute can be omitted, if embedding is <see cref="F:YAXLib.Enums.TextEmbedding.None" />.
            </param>
        </member>
        <member name="P:YAXLib.Attributes.YAXTextEmbeddingAttribute.Embedding">
            <inheritdoc cref="T:YAXLib.Enums.TextEmbedding" />
        </member>
        <member name="M:YAXLib.Attributes.YAXTextEmbeddingAttribute.YAXLib#IYaxMemberLevelAttribute#Setup(YAXLib.MemberWrapper)">
            <inheritdoc />
        </member>
        <member name="M:YAXLib.Attributes.YAXTypeAttribute.YAXLib#IYaxMemberLevelAttribute#Setup(YAXLib.MemberWrapper)">
            <inheritdoc />
        </member>
        <member name="T:YAXLib.Attributes.YAXValueForAttribute">
            <summary>
            Makes a field or property to appear as a value for another element, if possible.
            This attribute is applicable to fields and properties.
            </summary>
        </member>
        <member name="M:YAXLib.Attributes.YAXValueForAttribute.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:YAXLib.Attributes.YAXAttributeForAttribute" /> class.
            </summary>
            <param name="parent">The element of which the property becomes an attribute.</param>
        </member>
        <member name="P:YAXLib.Attributes.YAXValueForAttribute.Parent">
            <summary>
            Gets or sets the element for which the property becomes a value.
            </summary>
        </member>
        <member name="M:YAXLib.Attributes.YAXValueForAttribute.YAXLib#IYaxMemberLevelAttribute#Setup(YAXLib.MemberWrapper)">
            <inheritdoc />
        </member>
        <member name="T:YAXLib.Attributes.YAXValueForClassAttribute">
            <summary>
            Makes a field or property to appear as a value for its parent element, if possible.
            This attribute is applicable to fields and properties.
            </summary>
        </member>
        <member name="M:YAXLib.Attributes.YAXValueForClassAttribute.YAXLib#IYaxMemberLevelAttribute#Setup(YAXLib.MemberWrapper)">
            <inheritdoc />
        </member>
        <member name="M:YAXLib.Caching.CacheBase`2.SetInstanceVariable(YAXLib.Caching.CacheBase{`0,`1})">
            <summary>
            Sets the instance variable, if its current value is null.
            </summary>
            <param name="instance"></param>
        </member>
        <member name="P:YAXLib.Caching.CacheBase`2.KeyList">
            <summary>
            Stores the dictionary keys in the sequence as added
            </summary>
        </member>
        <member name="P:YAXLib.Caching.CacheBase`2.MaxCacheSize">
            <summary>
            Gets or sets the maximum number of items in the cache.
            </summary>
        </member>
        <member name="M:YAXLib.Caching.CacheBase`2.TryAdd(`0,`1)">
            <summary>
            Adds the value for key <see cref="T:System.Type" /> to the cache dictionary,
            if it does not exist yet.
            </summary>
            <param name="key">The key.</param>
            <param name="value">The value.</param>
            <returns><see langword="true" /> if the item could be added, else <see langword="false" />.</returns>
        </member>
        <member name="M:YAXLib.Caching.CacheBase`2.Add(`0,`1)">
            <summary>
            Adds the value for key <see cref="T:System.Type" /> to the cache dictionary.
            </summary>
            <param name="key">The key.</param>
            <param name="value">The value.</param>
            <exception cref="T:System.ArgumentException">Throws if the <paramref name="key" /> already exists.</exception>
        </member>
        <member name="M:YAXLib.Caching.CacheBase`2.EvictItems">
            <summary>
            Evict items from cache to keep its maximum size.
            </summary>
        </member>
        <member name="M:YAXLib.Caching.CacheBase`2.Clear">
            <summary>
            Clears the cache dictionary
            </summary>
        </member>
        <member name="T:YAXLib.Caching.CacheStaticBase">
            <summary>
            A static field in a generic type is not shared among instances of different constructed types.
            </summary>
        </member>
        <member name="T:YAXLib.Caching.MemberWrapperCache">
            <summary>
            Implements a singleton cache for <see cref="T:YAXLib.MemberWrapper" />s
            to prevent creation of <see cref="T:YAXLib.MemberWrapper" />s for the same type repetitively.
            <para>
            <b>Note</b>: The cache contains <b>all members</b> of a type that can <b>generally</b> be serialized.
            Filtering of undesired members takes place later in the de/serialization process.
            </para>
            </summary>
        </member>
        <member name="P:YAXLib.Caching.MemberWrapperCache.Instance">
            <summary>
            Gets the singleton instance of the <see cref="T:YAXLib.Caching.MemberWrapperCache" />.
            </summary>
        </member>
        <member name="M:YAXLib.Caching.MemberWrapperCache.TryGetItem(System.ValueTuple{System.Type,YAXLib.Options.SerializerOptions},System.Collections.Generic.IList{YAXLib.MemberWrapper}@)">
            <summary>
            Gets the <see cref="T:YAXLib.MemberWrapper" />s for to the specified type.
            </summary>
            <param name="to">The member whose wrapper is needed.</param>
            <param name="memberWrappers">
            The lists of <see cref="T:YAXLib.MemberWrapper" />s from the cache,
            or an empty list, if the type did not exist in the cache.
            </param>
            <returns><see langword="true" />, if <paramref name="to" /> was found in the cache.</returns>
        </member>
        <member name="T:YAXLib.Caching.UdtWrapperCache">
            <summary>
            Implements a singleton cache for <see cref="T:YAXLib.UdtWrapper" />s
            to prevent creation of <see cref="T:YAXLib.UdtWrapper" />s for the same type repetitively.
            </summary>
        </member>
        <member name="P:YAXLib.Caching.UdtWrapperCache.Instance">
            <summary>
            Gets the singleton instance of the <see cref="T:YAXLib.Caching.UdtWrapperCache" />.
            </summary>
        </member>
        <member name="M:YAXLib.Caching.UdtWrapperCache.GetOrAddItem(System.Type,YAXLib.Options.SerializerOptions)">
            <summary>
            Gets the <see cref="T:YAXLib.UdtWrapper" /> for to the specified type.
            </summary>
            <param name="t">The type whose wrapper is needed.</param>
            <param name="serializerOptions">The <see cref="T:YAXLib.Options.SerializerOptions" /> to use.</param>
            <returns>the type wrapper corresponding to the specified type</returns>
        </member>
        <member name="T:YAXLib.Customization.CustomSerializerWrapper">
            <summary>
            A wrapper around an <see cref="T:YAXLib.ICustomSerializer`1" />.
            It's methods are invoked with <see cref="N:System.Reflection" />.
            </summary>
        </member>
        <member name="P:YAXLib.Customization.CustomSerializerWrapper.Type">
            <summary>
            The custom serializer type.
            </summary>
        </member>
        <member name="M:YAXLib.Customization.CustomSerializerWrapper.SerializeToAttribute(System.Object,System.Xml.Linq.XAttribute,YAXLib.Customization.ISerializationContext)">
            <inheritdoc />
        </member>
        <member name="M:YAXLib.Customization.CustomSerializerWrapper.SerializeToElement(System.Object,System.Xml.Linq.XElement,YAXLib.Customization.ISerializationContext)">
            <inheritdoc />
        </member>
        <member name="M:YAXLib.Customization.CustomSerializerWrapper.SerializeToValue(System.Object,YAXLib.Customization.ISerializationContext)">
            <inheritdoc />
        </member>
        <member name="M:YAXLib.Customization.CustomSerializerWrapper.DeserializeFromAttribute(System.Xml.Linq.XAttribute,YAXLib.Customization.ISerializationContext)">
            <inheritdoc />
        </member>
        <member name="M:YAXLib.Customization.CustomSerializerWrapper.DeserializeFromElement(System.Xml.Linq.XElement,YAXLib.Customization.ISerializationContext)">
            <inheritdoc />
        </member>
        <member name="M:YAXLib.Customization.CustomSerializerWrapper.DeserializeFromValue(System.String,YAXLib.Customization.ISerializationContext)">
            <inheritdoc />
        </member>
        <member name="T:YAXLib.Customization.IMemberContext">
            <summary>
            The member context interface provides information about the attributes of a member and member metadata.
            </summary>
        </member>
        <member name="P:YAXLib.Customization.IMemberContext.MemberInfo">
            <summary>
            The member's <see cref="P:YAXLib.Customization.IMemberContext.MemberInfo" /> for member serialization, else <see langword="null" />.
            </summary>
        </member>
        <member name="P:YAXLib.Customization.IMemberContext.FieldInfo">
            <summary>
            The member's <see cref="P:YAXLib.Customization.IMemberContext.FieldInfo" /> for field serialization, else <see langword="null" />.
            </summary>
        </member>
        <member name="P:YAXLib.Customization.IMemberContext.PropertyInfo">
            <summary>
            The member's <see cref="P:YAXLib.Customization.IMemberContext.PropertyInfo" /> for property serialization, else <see langword="null" />.
            </summary>
        </member>
        <member name="P:YAXLib.Customization.IMemberContext.MemberDescriptor">
            <summary>
            The member's <see cref="T:YAXLib.IMemberDescriptor" /> for member serialization, else <see langword="null" />.
            </summary>
        </member>
        <member name="P:YAXLib.Customization.IMemberContext.TypeContext">
            <summary>
            The member's <see cref="T:YAXLib.Customization.TypeContext" /> for member serialization./>.
            </summary>
        </member>
        <member name="M:YAXLib.Customization.IMemberContext.GetValue(System.Object,System.Object[])">
            <summary>
            Gets value of this member in the specified object.
            </summary>
            <param name="obj">The object from which the value must be retrieved.</param>
            <param name="index">Optional index parameters for indexed properties.</param>
            <returns>The value for this member.</returns>
        </member>
        <member name="T:YAXLib.Customization.ISerializationContext">
            <summary>
            Provides information about <see cref="T:System.Type" />s and/or its members being serialized or deserialized.
            </summary>
        </member>
        <member name="P:YAXLib.Customization.ISerializationContext.TypeContext">
            <inheritdoc cref="T:YAXLib.Customization.ITypeContext" />
        </member>
        <member name="P:YAXLib.Customization.ISerializationContext.MemberContext">
            <inheritdoc cref="T:YAXLib.Customization.IMemberContext" />
        </member>
        <member name="P:YAXLib.Customization.ISerializationContext.SerializerOptions">
            <summary>
            Gets the <see cref="T:YAXLib.Options.SerializerOptions" /> of the <see cref="T:YAXLib.YAXSerializer" /> instance.
            </summary>
        </member>
        <member name="P:YAXLib.Customization.ISerializationContext.RecursionCount">
            <inheritdoc cref="P:YAXLib.IRecursionCounter.RecursionCount" />
        </member>
        <member name="T:YAXLib.Customization.ITypeContext">
            <summary>
            The type context interface provides information about the attributes of a type and type metadata.
            </summary>
        </member>
        <member name="P:YAXLib.Customization.ITypeContext.Type">
            <summary>
            The type's <see cref="T:System.Type" /> for serialization and deserialization.
            </summary>
        </member>
        <member name="M:YAXLib.Customization.ITypeContext.GetFieldsForSerialization">
            <summary>
            Gets the <see cref="T:YAXLib.Customization.MemberContext" /> for each serializable field of the <see cref="P:YAXLib.Customization.ITypeContext.Type" />.
            <para>
            Fields are filtered according to settings and attributes (if any),
            and ordered by the <see cref="T:YAXLib.Attributes.YAXElementOrder" /> attribute (if any).
            </para>
            </summary>
            <returns>An <see cref="T:System.Collections.IEnumerable" /> of the fields' <see cref="T:YAXLib.Customization.MemberContext" />.</returns>
        </member>
        <member name="M:YAXLib.Customization.ITypeContext.GetFieldsForDeserialization">
            <inheritdoc cref="M:YAXLib.Customization.TypeContext.GetFieldsForSerialization" />
        </member>
        <member name="M:YAXLib.Customization.ITypeContext.Serialize(System.Object,YAXLib.Options.SerializerOptions)">
            <summary>
            Serializes the <paramref name="obj" /> of type <see cref="P:YAXLib.Customization.ITypeContext.Type" /> to an <see cref="T:System.Xml.Linq.XElement" />.
            <para>
            The calling <see cref="T:YAXLib.KnownTypes.IKnownType" /> or <see cref="T:YAXLib.ICustomSerializer`1" /> will
            never be invoked recursively. Instead, the default serialization is executed.
            </para>
            </summary>
            <param name="obj">The object of type <see cref="P:YAXLib.Customization.ITypeContext.Type" /> to serialize.</param>
            <param name="options">
            The <see cref="T:YAXLib.Options.SerializerOptions" /> or <see langword="null" /> to take options from the parent
            <seealso cref="T:YAXLib.YAXSerializer" />.
            </param>
            <returns>The <see cref="T:System.Xml.Linq.XElement" /> representation of the object graph.</returns>
        </member>
        <member name="M:YAXLib.Customization.ITypeContext.Deserialize(System.Xml.Linq.XElement,YAXLib.Options.SerializerOptions)">
            <summary>
            Deserializes the <paramref name="element" /> to a new instance of <see cref="P:YAXLib.Customization.ITypeContext.Type" />.
            <para>
            The calling <see cref="T:YAXLib.KnownTypes.IKnownType" /> or <see cref="T:YAXLib.ICustomSerializer`1" /> will
            never be invoked recursively. Instead, the default deserialization is executed.
            </para>
            </summary>
            <param name="element">The object of type <see cref="P:YAXLib.Customization.ITypeContext.Type" /> to serialize.</param>
            <param name="options">
            The <see cref="T:YAXLib.Options.SerializerOptions" /> or <see langword="null" /> to take options from the parent
            <seealso cref="T:YAXLib.YAXSerializer" />.
            </param>
            <returns>A new instance of <see cref="P:YAXLib.Customization.ITypeContext.Type" /> created from the <paramref name="element" /></returns>
        </member>
        <member name="T:YAXLib.Customization.MemberContext">
            <summary>
            The member context provides information about the attributes of a member and member metadata.
            </summary>
        </member>
        <member name="M:YAXLib.Customization.MemberContext.#ctor(YAXLib.MemberWrapper,YAXLib.YAXSerializer)">
            <summary>
            Creates a new member context instance.
            </summary>
            <param name="memberWrapper"></param>
            <param name="serializer"></param>
        </member>
        <member name="P:YAXLib.Customization.MemberContext.MemberInfo">
            <inheritdoc />
        </member>
        <member name="P:YAXLib.Customization.MemberContext.FieldInfo">
            <inheritdoc />
        </member>
        <member name="P:YAXLib.Customization.MemberContext.PropertyInfo">
            <inheritdoc />
        </member>
        <member name="P:YAXLib.Customization.MemberContext.MemberDescriptor">
            <inheritdoc />
        </member>
        <member name="P:YAXLib.Customization.MemberContext.TypeContext">
            <inheritdoc />
        </member>
        <member name="M:YAXLib.Customization.MemberContext.GetValue(System.Object,System.Object[])">
            <inheritdoc />
        </member>
        <member name="T:YAXLib.Customization.SerializationContext">
            <inheritdoc />
        </member>
        <member name="M:YAXLib.Customization.SerializationContext.#ctor(YAXLib.MemberWrapper,YAXLib.UdtWrapper,YAXLib.YAXSerializer)">
            <summary>
            Creates a new serialization context instance.
            </summary>
            <param name="memberWrapper"></param>
            <param name="udtWrapper"></param>
            <param name="serializer"></param>
        </member>
        <member name="P:YAXLib.Customization.SerializationContext.MemberContext">
            <inheritdoc />
        </member>
        <member name="P:YAXLib.Customization.SerializationContext.TypeContext">
            <inheritdoc />
        </member>
        <member name="P:YAXLib.Customization.SerializationContext.SerializerOptions">
            <inheritdoc />
        </member>
        <member name="P:YAXLib.Customization.SerializationContext.RecursionCount">
            <inheritdoc cref="P:YAXLib.IRecursionCounter.RecursionCount" />
        </member>
        <member name="T:YAXLib.Customization.TypeContext">
            <summary>
            The type context provides information about the attributes of a type and type metadata.
            </summary>
        </member>
        <member name="M:YAXLib.Customization.TypeContext.#ctor(YAXLib.UdtWrapper,YAXLib.YAXSerializer)">
            <summary>
            Creates a new type context instance.
            </summary>
            <param name="udtWrapper">The <see cref="T:YAXLib.UdtWrapper" />.</param>
            <param name="serializer">The <see cref="T:YAXLib.YAXSerializer" />.</param>
        </member>
        <member name="P:YAXLib.Customization.TypeContext.Type">
            <inheritdoc />
        </member>
        <member name="M:YAXLib.Customization.TypeContext.GetFieldsForSerialization">
            <inheritdoc />
        </member>
        <member name="M:YAXLib.Customization.TypeContext.GetFieldsForDeserialization">
            <inheritdoc />
        </member>
        <member name="M:YAXLib.Customization.TypeContext.Serialize(System.Object,YAXLib.Options.SerializerOptions)">
            <inheritdoc />
        </member>
        <member name="M:YAXLib.Customization.TypeContext.Deserialize(System.Xml.Linq.XElement,YAXLib.Options.SerializerOptions)">
            <inheritdoc />
        </member>
        <member name="M:YAXLib.Customization.TypeContext.InitializeAsChildSerializer(YAXLib.YAXSerializer,YAXLib.Options.SerializerOptions)">
            <summary>
            Initialize similar to <see cref="M:YAXLib.YAXSerializer.InitializeAsChildSerializer(YAXLib.YAXSerializer,System.Xml.Linq.XNamespace,System.Xml.Linq.XElement)" />,
            but without overriding namespace and insert location.
            </summary>
        </member>
        <member name="T:YAXLib.DefaultTypeInspector">
            <inheritdoc />
        </member>
        <member name="M:YAXLib.DefaultTypeInspector.GetMembers(System.Type,YAXLib.Options.SerializerOptions,System.Boolean)">
            <inheritdoc />
        </member>
        <member name="M:YAXLib.DefaultTypeInspector.GetTypeName(System.Type,YAXLib.Options.SerializerOptions)">
            <inheritdoc />
        </member>
        <member name="F:YAXLib.Deserialization._deserializationObject">
            <summary>
            Reference to a pre assigned deserialization base object
            Will always be set by the serializer using <see cref="M:YAXLib.Deserialization.SetDeserializationBaseObject(System.Object)" /> when deserialization
            starts.
            </summary>
        </member>
        <member name="F:YAXLib.Deserialization._exceptionOccurredDuringMemberDeserialization">
            <summary>
            Specifies whether an exception is occurred during the de-serialization of the current member
            </summary>
        </member>
        <member name="M:YAXLib.Deserialization.Initialize">
            <summary>
            This instance will be (re-) initialized it a way
            that it has the same virgin state like an instance that
            was created with one of the CTORs.
            </summary>
        </member>
        <member name="M:YAXLib.Deserialization.SetDeserializationBaseObject(System.Object)">
            <summary>
            Sets the object used as the base object in the next stage of deserialization.
            This method enables multi-stage deserialization for YAXLib.
            </summary>
            <param name="obj">The object used as the base object in the next stage of deserialization.</param>
        </member>
        <member name="P:YAXLib.Deserialization.IsCreatedToDeserializeANonCollectionMember">
            <summary>
            Gets or sets a value indicating whether this instance is created to deserialize a non collection member of another
            object.
            </summary>
            <value>
            <see langword="true" /> if this instance is created to deserialize a non collection member of another object;
            otherwise,
            <see langword="false" />.
            </value>
        </member>
        <member name="P:YAXLib.Deserialization.RemoveDeserializedXmlNodes">
            <summary>
            Gets or sets a value indicating whether XML elements or attributes should be removed after being deserialized
            </summary>
        </member>
        <member name="M:YAXLib.Deserialization.DeserializeBase(System.Xml.Linq.XElement)">
            <summary>
            The basic method which performs the whole job of deserialization.
            </summary>
            <param name="baseElement">The element to be deserialized.</param>
            <returns>object containing the deserialized data</returns>
        </member>
        <member name="M:YAXLib.Deserialization.OnExceptionOccurred(YAXLib.Exceptions.YAXException,YAXLib.Enums.YAXExceptionTypes)">
            <summary>
            Called when deserialization exception occurs. It applies the exception handling policies.
            </summary>
            <param name="ex">The exception that has occurred.</param>
            <param name="exceptionType">Type of the exception.</param>
        </member>
        <member name="M:YAXLib.Deserialization.DeserializeDefault(System.Xml.Linq.XElement)">
            <summary>
            The default serialization algorithm, which deserializes per field and
            from value, from attribute, from XML element,
            from custom serializers and known types.
            </summary>
            <param name="baseElement"></param>
            <returns>The deserialized object</returns>
        </member>
        <member name="M:YAXLib.Deserialization.AtLeastOneOfCollectionMembersExists(System.Xml.Linq.XElement,YAXLib.MemberWrapper)">
            <summary>
            Checks whether at least one of the collection members of
            the specified collection exists.
            </summary>
            <param name="elem">The XML element to check its content.</param>
            <param name="member">
            The class-member corresponding to the collection for
            which we intend to check existence of its members.
            </param>
            <returns></returns>
        </member>
        <member name="M:YAXLib.Deserialization.AtLeastOneOfMembersExists(System.Xml.Linq.XElement,System.Type)">
            <summary>
            Checks whether at least one member (property or field) of
            the specified element exists in the type.
            </summary>
            <param name="elem">The XML element to check its content.</param>
            <param name="type">
            The class type corresponding to the element for
            which we intend to check existence of its members.
            </param>
            <returns><see langword="true" />, if at least one member of the specified element exists in the type.</returns>
        </member>
        <member name="M:YAXLib.Deserialization.RetrieveElementValue(System.Object,YAXLib.MemberWrapper,System.String,System.Xml.Linq.XElement)">
            <summary>
            Retrieves the value of the element from the specified XML element or attribute.
            </summary>
            <param name="obj">The object to store the retrieved value at.</param>
            <param name="member">The member of the specified object whose value we intent to retrieve.</param>
            <param name="elemValue">The value of the element stored as string.</param>
            <param name="xElementValue">
            The XML element value to be retrieved. If the value to be retrieved
            has been stored in an XML attribute, this reference is <c>null</c>.
            </param>
        </member>
        <member name="M:YAXLib.Deserialization.TrySetValueDefault(System.Object,YAXLib.MemberWrapper,System.Type,System.Xml.Linq.XElement)">
            <summary>
            The default method for retrieving element values.
            </summary>
            <param name="obj"></param>
            <param name="member"></param>
            <param name="memberType"></param>
            <param name="xElementValue"></param>
        </member>
        <member name="M:YAXLib.Deserialization.DeserializeCollectionValue(System.Type,System.Xml.Linq.XElement,System.Xml.Linq.XName,YAXLib.Attributes.YAXCollectionAttribute)">
            <summary>
            Retrieves the collection value.
            </summary>
            <param name="collType">Type of the collection to be retrieved.</param>
            <param name="xElement">The xml element.</param>
            <param name="memberAlias">The member's alias, used only in exception titles.</param>
            <param name="collAttrInstance">The collection attribute instance.</param>
            <returns></returns>
        </member>
        <member name="M:YAXLib.Deserialization.GetRecursiveCollectionItems(System.Xml.Linq.XElement,System.Xml.Linq.XName,YAXLib.Attributes.YAXCollectionAttribute,System.Type,System.Boolean,System.Collections.Generic.List{System.Object})">
            <summary>
            Gets the data items for a collection that was serialized recursively,
            or that has no containing element
            </summary>
            <param name="xElement"></param>
            <param name="memberAlias"></param>
            <param name="collAttrInstance"></param>
            <param name="collItemType"></param>
            <param name="isPrimitive"></param>
            <param name="dataItems">The list that will be filled.</param>
        </member>
        <member name="M:YAXLib.Deserialization.GetSerialCollectionItems(System.Xml.Linq.XElement,System.Xml.Linq.XName,YAXLib.Attributes.YAXCollectionAttribute,System.Type,System.Collections.Generic.List{System.Object})">
            <summary>
            Gets the data items for a collection that was serialized serially.
            </summary>
            <param name="xElement"></param>
            <param name="memberAlias"></param>
            <param name="collAttrInstance"></param>
            <param name="collItemType"></param>
            <param name="dataItems">The list that will be filled.</param>
        </member>
        <member name="M:YAXLib.Deserialization.DeserializeCollectionMember(System.Object,YAXLib.MemberWrapper,System.Type,System.String,System.Xml.Linq.XElement)">
            <summary>
            Deserializes the collection member.
            </summary>
            <param name="o">The object to store the retrieved value at.</param>
            <param name="member">The member of the specified object whose value we intent to retreive.</param>
            <param name="colType">Type of the collection to be retrieved.</param>
            <param name="elemValue">The value of the element stored as string.</param>
            <param name="xelemValue">
            The XML element value to be retrieved. If the value to be retrieved
            has been stored in an XML attribute, this reference is <c>null</c>.
            </param>
        </member>
        <member name="M:YAXLib.Deserialization.GetArrayDimensionalIndex(System.Int64,System.Int32[])">
            <summary>
            Gets the dimensional index for an element of a multi-dimensional array from a
            linear index specified.
            </summary>
            <param name="linearIndex">The linear index.</param>
            <param name="dimensions">The dimensions of the array.</param>
            <returns></returns>
        </member>
        <member name="M:YAXLib.Deserialization.DeserializeTaggedDictionaryMember(System.Object,YAXLib.MemberWrapper,System.Xml.Linq.XElement)">
            <summary>
            Deserializes a dictionary member which also benefits from a <see cref="T:YAXLib.Attributes.YAXDictionaryAttribute" />.
            </summary>
            <param name="o">The object to hold the deserialized value.</param>
            <param name="member">The member corresponding to the dictionary member.</param>
            <param name="xelemValue">The XML element value.</param>
        </member>
        <member name="M:YAXLib.Deserialization.VerifyDictionaryPairElements(System.Type@,System.Boolean@,System.Boolean@,System.Xml.Linq.XName,System.Xml.Linq.XElement)">
            <summary>
            Verifies the existence of dictionary pair <c>Key</c> and <c>Value</c> elements.
            </summary>
            <param name="type">Type of the key or content.</param>
            <param name="isAttribute">
            if set to <see langword="true" /> means that key or content have been serialize as an
            attribute.
            </param>
            <param name="isContent">
            if set to <see langword="true" /> means that key or content has been serialize as an XML
            content.
            </param>
            <param name="alias">The alias for the key or content.</param>
            <param name="childElem">The child XML element to search <c>Key</c> and <c>Value</c> elements in.</param>
            <returns><ref langword="true" /> if the elements were found.</returns>
        </member>
        <member name="M:YAXLib.Deserialization.VerifyDictionaryPairElementsInChild(System.Type@,System.Boolean@,System.Boolean@,System.Xml.Linq.XName,System.Xml.Linq.XElement)">
            <summary>
            Verifies the existence of a child dictionary pair <c>Key</c> and <c>Value</c> element.
            Here we look for an element with the same name.
            If it is found, we also check for a yaxlib:realtype attribute to get the real type.
            </summary>
            <param name="type">Type of the key or content.</param>
            <param name="isAttribute">
            if set to <see langword="true" /> means that key or content have been serialize as an
            attribute.
            </param>
            <param name="isContent">
            if set to <see langword="true" /> means that key or content has been serialize as an XML
            content.
            </param>
            <param name="alias">The alias for the key or content.</param>
            <param name="childElem">The child XML element to search <c>Key</c> and <c>Value</c> elements in.</param>
            <returns><ref langword="true" /> if the elements were found.</returns>
        </member>
        <member name="M:YAXLib.Deserialization.DeserializeKeyValuePair(System.Xml.Linq.XElement)">
            <summary>
            Deserializes the XML representation of a key-value pair, as specified, and returns
            a <c>KeyValuePair</c> instance containing the deserialized data.
            </summary>
            <param name="baseElement">The element containing the XML representation of a key-value pair.</param>
            <returns>a <c>KeyValuePair</c> instance containing the deserialized data</returns>
        </member>
        <member name="M:YAXLib.Deserialization.GetXmlLoadOptions">
            <summary>
            Generates XDocument LoadOptions from SerializationOption
            </summary>
        </member>
        <member name="T:YAXLib.Enums.TextEmbedding">
            <summary>
            Options for embedding a string value to an <see cref="T:System.Xml.Linq.XElement" />.
            </summary>
        </member>
        <member name="F:YAXLib.Enums.TextEmbedding.None">
            <summary>
            No embedding. Legal special characters like '&lt;' or '&amp;' will be entitized.
            </summary>
        </member>
        <member name="F:YAXLib.Enums.TextEmbedding.CData">
            <summary>
            The element text is embedded as character data (CDATA, <see cref="T:System.Xml.Linq.XCData" />).
            <para>
            This is useful, e.g. if a <see langword="string" /> contains HTML tags or script code.
            The result is better human-readable.
            </para>
            </summary>
        </member>
        <member name="F:YAXLib.Enums.TextEmbedding.Base64">
            <summary>
            Embedded by encoding to a Base64-encoded string, and restored from a Base64-encoded string.
            This is useful, if a <see langword="string" /> may contain control or other
            invalid XML characters in an <see cref="T:System.Xml.Linq.XElement" /> value.
            </summary>
        </member>
        <member name="T:YAXLib.Enums.YAXCollectionSerializationTypes">
            <summary>
            Enumerates the possible ways of serializing collection classes
            </summary>
        </member>
        <member name="F:YAXLib.Enums.YAXCollectionSerializationTypes.Recursive">
            <summary>
            Serializes each member of the collection, as a separate element, all enclosed in an element regarding the
            collection itself
            </summary>
        </member>
        <member name="F:YAXLib.Enums.YAXCollectionSerializationTypes.RecursiveWithNoContainingElement">
            <summary>
            Serializes each member of the collection, as a separate element, with no enclosing element for the collection
            </summary>
        </member>
        <member name="F:YAXLib.Enums.YAXCollectionSerializationTypes.Serially">
            <summary>
            Serializes all members of the collection in one element separated by some delimiter, if possible.
            </summary>
        </member>
        <member name="T:YAXLib.Enums.YAXExceptionHandlingPolicies">
            <summary>
            Enumerates different kinds of exception handling policies as used by YAX Library.
            </summary>
        </member>
        <member name="F:YAXLib.Enums.YAXExceptionHandlingPolicies.ThrowWarningsAndErrors">
            <summary>
            Throws Both Warnings And Errors
            </summary>
        </member>
        <member name="F:YAXLib.Enums.YAXExceptionHandlingPolicies.ThrowErrorsOnly">
            <summary>
            Throws Errors only (default)
            </summary>
        </member>
        <member name="F:YAXLib.Enums.YAXExceptionHandlingPolicies.DoNotThrow">
            <summary>
            Does not throw exceptions, the errors can be accessed via the YAXParsingErrors instance
            </summary>
        </member>
        <member name="T:YAXLib.Enums.YAXExceptionTypes">
            <summary>
            Enumerates different possible behaviors of the library toward exceptions
            </summary>
        </member>
        <member name="F:YAXLib.Enums.YAXExceptionTypes.Ignore">
            <summary>
            Ignore non-fatal exceptions; neither throw them, nor log them.
            </summary>
        </member>
        <member name="F:YAXLib.Enums.YAXExceptionTypes.Warning">
            <summary>
            Treat exception as a warning
            </summary>
        </member>
        <member name="F:YAXLib.Enums.YAXExceptionTypes.Error">
            <summary>
            Treat exception as an error
            </summary>
        </member>
        <member name="T:YAXLib.Enums.YAXNodeTypes">
            <summary>
            Enumerates possible XML node types upon which a property can be serialized.
            </summary>
        </member>
        <member name="F:YAXLib.Enums.YAXNodeTypes.Attribute">
            <summary>
            Serialize data as an attribute for the base element
            </summary>
        </member>
        <member name="F:YAXLib.Enums.YAXNodeTypes.Element">
            <summary>
            Serialize data as an element
            </summary>
        </member>
        <member name="F:YAXLib.Enums.YAXNodeTypes.Content">
            <summary>
            Serialize data as content of the element
            </summary>
        </member>
        <member name="T:YAXLib.Enums.YAXSerializationFields">
            <summary>
            Enumerates possible options for a serializable type
            </summary>
        </member>
        <member name="F:YAXLib.Enums.YAXSerializationFields.PublicPropertiesOnly">
            <summary>
            Serializes only the public properties (the default behaviour)
            </summary>
        </member>
        <member name="F:YAXLib.Enums.YAXSerializationFields.AllFields">
            <summary>
            Serializes all fields (properties or fields) which are <see langword="public" />, or non-public.
            <b>Note</b>: To also include private <b>fields</b> and <b>properties</b> from <b><see cref="P:System.Type.BaseType" />s</b>,
            <see cref="P:YAXLib.Attributes.YAXSerializableTypeAttribute.IncludePrivateMembersFromBaseTypes" /> must be set to <see langword="true" />.
            </summary>
        </member>
        <member name="F:YAXLib.Enums.YAXSerializationFields.AttributedFieldsOnly">
            <summary>
            Serializes all fields (properties or member variables) which are public, or non-public, if attributed as
            <c>YAXSerializableField</c>
            </summary>
        </member>
        <member name="T:YAXLib.Enums.YAXSerializationOptions">
            <summary>
            Enumerates different serialization options which could be set at construction time.
            </summary>
        </member>
        <member name="F:YAXLib.Enums.YAXSerializationOptions.None">
            <summary>
            No serialization options set
            </summary>
        </member>
        <member name="F:YAXLib.Enums.YAXSerializationOptions.SerializeNullObjects">
            <summary>
            Serializes null objects also (the default)
            </summary>
        </member>
        <member name="F:YAXLib.Enums.YAXSerializationOptions.DontSerializeNullObjects">
            <summary>
            Prevents serialization of null objects.
            </summary>
        </member>
        <member name="F:YAXLib.Enums.YAXSerializationOptions.ThrowUponSerializingCyclingReferences">
            <summary>
            Prevents that cycle references from child to parent objects cause an infinite loop.
            </summary>
        </member>
        <member name="F:YAXLib.Enums.YAXSerializationOptions.DontSerializePropertiesWithNoSetter">
            <summary>
            Prevents serialization of properties with no setter
            </summary>
        </member>
        <member name="F:YAXLib.Enums.YAXSerializationOptions.SuppressMetadataAttributes">
            <summary>
            Never add YAXLib metadata attributes (e.g., 'yaxlib:realtype') to the serialized XML (even when they would be
            required for deserialization.)
            Useful when generating XML is targeting third party systems.
            </summary>
        </member>
        <member name="F:YAXLib.Enums.YAXSerializationOptions.DisplayLineInfoInExceptions">
            <summary>
            Provides line number and position (where available) in deserialization exceptions.
            Enabling this has a performance impact
            </summary>
        </member>
        <member name="F:YAXLib.Enums.YAXSerializationOptions.StripInvalidXmlChars">
            <summary>
            Silently removes illegal XML characters when serializing, instead of throwing an exception.
            Note: XML containing illegal characters cannot be loaded and deserialized.
            <para>
            Default: disabled.
            </para>
            </summary>
        </member>
        <member name="F:YAXLib.Enums.YAXSerializationOptions.DoNotSerializeDefaultValues">
            <summary>
            Prevents serialization of default values.
            </summary>
        </member>
        <member name="T:YAXLib.EnumWrapper">
            <summary>
            Provides a wrapper around enum types, in order to provide alias definition capabilities for enums
            </summary>
        </member>
        <member name="F:YAXLib.EnumWrapper._enumMembers">
            <summary>
            Maps real enum names to their corresponding user defined aliases
            </summary>
        </member>
        <member name="F:YAXLib.EnumWrapper._enumType">
            <summary>
            The enum underlying type
            </summary>
        </member>
        <member name="M:YAXLib.EnumWrapper.#ctor(System.Type)">
            <summary>
            Initializes a new instance of the <see cref="T:YAXLib.EnumWrapper" /> class.
            </summary>
            <param name="t">The enum type.</param>
        </member>
        <member name="M:YAXLib.EnumWrapper.ParseAlias(System.String)">
            <summary>
            Parses the alias and returns the correct enum value. Throws an exception if the alias cannot be matched.
            </summary>
            <param name="alias">The alias.</param>
            <returns>the enum member corresponding to the specified alias</returns>
        </member>
        <member name="M:YAXLib.EnumWrapper.GetAlias(System.Object)">
            <summary>
            Gets the alias for the specified enum value.
            </summary>
            <param name="enumMember">The enum member.</param>
            <returns>the alias corresponding to the specified enum member</returns>
        </member>
        <member name="M:YAXLib.EnumWrapper.FindRealNameFromAlias(System.String)">
            <summary>
            Finds the real name from alias.
            </summary>
            <param name="alias">The alias.</param>
            <returns>the real name of the enum member</returns>
        </member>
        <member name="T:YAXLib.Exceptions.YAXAttributeAlreadyExistsException">
            <summary>
            Raised when trying to serialize an attribute where
            another attribute with the same name already exists.
            This exception is raised during serialization.
            </summary>
        </member>
        <member name="M:YAXLib.Exceptions.YAXAttributeAlreadyExistsException.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:YAXLib.Exceptions.YAXAttributeAlreadyExistsException" /> class.
            </summary>
            <param name="attrName">Name of the attribute.</param>
        </member>
        <member name="P:YAXLib.Exceptions.YAXAttributeAlreadyExistsException.AttrName">
            <summary>
            Gets the name of the attribute.
            </summary>
            <value>The name of the attribute.</value>
        </member>
        <member name="P:YAXLib.Exceptions.YAXAttributeAlreadyExistsException.Message">
            <summary>
            Gets a message that describes the current exception.
            </summary>
            <value></value>
            <returns>
            The error message that explains the reason for the exception, or an empty string("").
            </returns>
        </member>
        <member name="T:YAXLib.Exceptions.YAXAttributeMissingException">
            <summary>
            Raised when the attribute corresponding to some property is not present in the given XML file, when deserializing.
            This exception is raised during deserialization.
            </summary>
        </member>
        <member name="M:YAXLib.Exceptions.YAXAttributeMissingException.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:YAXLib.Exceptions.YAXAttributeMissingException" /> class.
            </summary>
            <param name="attrName">Name of the attribute.</param>
        </member>
        <member name="M:YAXLib.Exceptions.YAXAttributeMissingException.#ctor(System.String,System.Xml.IXmlLineInfo)">
            <summary>
            Initializes a new instance of the <see cref="T:YAXLib.Exceptions.YAXAttributeMissingException" /> class.
            </summary>
            <param name="attrName">Name of the attribute.</param>
            <param name="lineInfo">IXmlLineInfo derived object, e.g. XElement, XAttribute containing line info</param>
        </member>
        <member name="P:YAXLib.Exceptions.YAXAttributeMissingException.AttributeName">
            <summary>
            Gets the name of the attribute.
            </summary>
            <value>The name of the attribute.</value>
        </member>
        <member name="P:YAXLib.Exceptions.YAXAttributeMissingException.Message">
            <summary>
            Gets a message that describes the current exception.
            </summary>
            <value></value>
            <returns>
            The error message that explains the reason for the exception, or an empty string("").
            </returns>
        </member>
        <member name="T:YAXLib.Exceptions.YAXBadLocationException">
            <summary>
            Raised when the location of serialization specified cannot be
            created or cannot be read from.
            This exception is raised during serialization
            </summary>
        </member>
        <member name="M:YAXLib.Exceptions.YAXBadLocationException.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:YAXLib.Exceptions.YAXBadLocationException" /> class.
            </summary>
            <param name="location">The location.</param>
        </member>
        <member name="P:YAXLib.Exceptions.YAXBadLocationException.Location">
            <summary>
            Gets or sets the bad location which caused the exception
            </summary>
            <value>The location.</value>
        </member>
        <member name="P:YAXLib.Exceptions.YAXBadLocationException.Message">
            <summary>
            Gets a message that describes the current exception.
            </summary>
            <value></value>
            <returns>
            The error message that explains the reason for the exception, or an empty string("").
            </returns>
        </member>
        <member name="T:YAXLib.Exceptions.YAXBadlyFormedInput">
            <summary>
            Raised when the value provided for some property in the XML input, cannot be
            converted to the type of the property.
            This exception is raised during deserialization.
            </summary>
        </member>
        <member name="M:YAXLib.Exceptions.YAXBadlyFormedInput.#ctor(System.String,System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:YAXLib.Exceptions.YAXBadlyFormedInput" /> class.
            </summary>
            <param name="elemName">Name of the element.</param>
            <param name="badInput">The value of the input which could not be converted to the type of the property.</param>
        </member>
        <member name="M:YAXLib.Exceptions.YAXBadlyFormedInput.#ctor(System.String,System.String,System.Xml.IXmlLineInfo)">
            <summary>
            Initializes a new instance of the <see cref="T:YAXLib.Exceptions.YAXBadlyFormedInput" /> class.
            </summary>
            <param name="elemName">Name of the element.</param>
            <param name="badInput">The value of the input which could not be converted to the type of the property.</param>
            <param name="lineInfo">IXmlLineInfo derived object, e.g. XElement, XAttribute containing line info</param>
        </member>
        <member name="P:YAXLib.Exceptions.YAXBadlyFormedInput.ElementName">
            <summary>
            Gets the name of the element.
            </summary>
            <value>The name of the element.</value>
        </member>
        <member name="P:YAXLib.Exceptions.YAXBadlyFormedInput.BadInput">
            <summary>
            Gets the value of the input which could not be converted to the type of the property.
            </summary>
            <value>The value of the input which could not be converted to the type of the property.</value>
        </member>
        <member name="P:YAXLib.Exceptions.YAXBadlyFormedInput.Message">
            <summary>
            Gets a message that describes the current exception.
            </summary>
            <value></value>
            <returns>
            The error message that explains the reason for the exception, or an empty string("").
            </returns>
        </member>
        <member name="T:YAXLib.Exceptions.YAXBadlyFormedXML">
            <summary>
            Raised when the XML input does not follow standard XML formatting rules.
            This exception is raised during deserialization.
            </summary>
        </member>
        <member name="F:YAXLib.Exceptions.YAXBadlyFormedXML._innerException">
            <summary>
            The inner exception.
            </summary>
        </member>
        <member name="P:YAXLib.Exceptions.YAXBadlyFormedXML.Message">
            <summary>
            Gets a message that describes the current exception.
            </summary>
            <value></value>
            <returns>
            The error message that explains the reason for the exception, or an empty string("").
            </returns>
        </member>
        <member name="M:YAXLib.Exceptions.YAXBadlyFormedXML.#ctor(System.Exception,System.Int32,System.Int32)">
            <summary>
            Initializes a new instance of the <see cref="T:YAXLib.Exceptions.YAXBadlyFormedXML" /> class.
            </summary>
            <param name="innerException">The inner exception.</param>
            <param name="lineNumber">The line number on which the error occurred</param>
            <param name="linePosition">The line position on which the error occurred</param>
        </member>
        <member name="M:YAXLib.Exceptions.YAXBadlyFormedXML.#ctor(System.Exception)">
            <summary>
            Initializes a new instance of the <see cref="T:YAXLib.Exceptions.YAXBadlyFormedXML" /> class.
            </summary>
            <param name="innerException">The inner exception.</param>
        </member>
        <member name="M:YAXLib.Exceptions.YAXBadlyFormedXML.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:YAXLib.Exceptions.YAXBadlyFormedXML" /> class.
            </summary>
        </member>
        <member name="T:YAXLib.Exceptions.YAXCannotAddObjectToCollection">
            <summary>
            Raised when some member of the collection in the input XML, cannot be added to the collection object.
            This exception is raised during deserialization.
            </summary>
        </member>
        <member name="M:YAXLib.Exceptions.YAXCannotAddObjectToCollection.#ctor(System.String,System.Object)">
            <summary>
            Initializes a new instance of the <see cref="T:YAXLib.Exceptions.YAXCannotAddObjectToCollection" /> class.
            </summary>
            <param name="propName">Name of the property.</param>
            <param name="obj">The object that could not be added to the collection.</param>
        </member>
        <member name="M:YAXLib.Exceptions.YAXCannotAddObjectToCollection.#ctor(System.String,System.Object,System.Xml.IXmlLineInfo)">
            <summary>
            Initializes a new instance of the <see cref="T:YAXLib.Exceptions.YAXCannotAddObjectToCollection" /> class.
            </summary>
            <param name="propName">Name of the property.</param>
            <param name="obj">The object that could not be added to the collection.</param>
            <param name="lineInfo">IXmlLineInfo derived object, e.g. XElement, XAttribute containing line info</param>
        </member>
        <member name="P:YAXLib.Exceptions.YAXCannotAddObjectToCollection.PropertyName">
            <summary>
            Gets the name of the property.
            </summary>
            <value>The name of the property.</value>
        </member>
        <member name="P:YAXLib.Exceptions.YAXCannotAddObjectToCollection.ObjectToAdd">
            <summary>
            Gets the object that could not be added to the collection.
            </summary>
            <value>the object that could not be added to the collection.</value>
        </member>
        <member name="P:YAXLib.Exceptions.YAXCannotAddObjectToCollection.Message">
            <summary>
            Gets a message that describes the current exception.
            </summary>
            <value></value>
            <returns>
            The error message that explains the reason for the exception, or an empty string("").
            </returns>
        </member>
        <member name="T:YAXLib.Exceptions.YAXCannotSerializeSelfReferentialTypes">
            <summary>
            Raised when trying to serialize self-referential types. This exception cannot be turned off.
            This exception is raised during serialization.
            </summary>
        </member>
        <member name="M:YAXLib.Exceptions.YAXCannotSerializeSelfReferentialTypes.#ctor(System.Type)">
            <summary>
            Initializes a new instance of the <see cref="T:YAXLib.Exceptions.YAXCannotSerializeSelfReferentialTypes" /> class.
            </summary>
            <param name="type">The the self-referential type that caused the problem.</param>
        </member>
        <member name="P:YAXLib.Exceptions.YAXCannotSerializeSelfReferentialTypes.SelfReferentialType">
            <summary>
            Gets the self-referential type that caused the problem.
            </summary>
            <value>The type of the self-referential type that caused the problem.</value>
        </member>
        <member name="P:YAXLib.Exceptions.YAXCannotSerializeSelfReferentialTypes.Message">
            <summary>
            Gets a message that describes the current exception.
            </summary>
            <returns>
            The error message that explains the reason for the exception, or an empty string("").
            </returns>
        </member>
        <member name="T:YAXLib.Exceptions.YAXDefaultValueCannotBeAssigned">
            <summary>
            Raised when the default value specified by the <c>YAXErrorIfMissedAttribute</c> could not be assigned to the
            property.
            This exception is raised during deserialization.
            </summary>
        </member>
        <member name="M:YAXLib.Exceptions.YAXDefaultValueCannotBeAssigned.#ctor(System.String,System.Object,System.Globalization.CultureInfo)">
            <summary>
            Initializes a new instance of the <see cref="T:YAXLib.Exceptions.YAXDefaultValueCannotBeAssigned" /> class.
            </summary>
            <param name="propName">Name of the property.</param>
            <param name="defaultValue">The default value which caused the problem.</param>
            <param name="culture">The <see cref="T:System.Globalization.CultureInfo" /> used for string formatting values.</param>
        </member>
        <member name="M:YAXLib.Exceptions.YAXDefaultValueCannotBeAssigned.#ctor(System.String,System.Object,System.Xml.IXmlLineInfo,System.Globalization.CultureInfo)">
            <summary>
            Initializes a new instance of the <see cref="T:YAXLib.Exceptions.YAXDefaultValueCannotBeAssigned" /> class.
            </summary>
            <param name="propName">Name of the property.</param>
            <param name="defaultValue">The default value which caused the problem.</param>
            <param name="lineInfo">IXmlLineInfo derived object, e.g. XElement, XAttribute containing line info</param>
            <param name="culture">The <see cref="T:System.Globalization.CultureInfo" /> used for string formatting values in the <see cref="P:YAXLib.Exceptions.YAXDefaultValueCannotBeAssigned.Message" />.</param>
        </member>
        <member name="P:YAXLib.Exceptions.YAXDefaultValueCannotBeAssigned.PropertyName">
            <summary>
            Gets the name of the property.
            </summary>
            <value>The name of the property.</value>
        </member>
        <member name="P:YAXLib.Exceptions.YAXDefaultValueCannotBeAssigned.TheDefaultValue">
            <summary>
            Gets the default value which caused the problem.
            </summary>
            <value>The default value which caused the problem.</value>
        </member>
        <member name="P:YAXLib.Exceptions.YAXDefaultValueCannotBeAssigned.Culture">
            <summary>
            Gets the <see cref="T:System.Globalization.CultureInfo" /> used for string formatting values in the <see cref="P:YAXLib.Exceptions.YAXDefaultValueCannotBeAssigned.Message" />,
            </summary>
        </member>
        <member name="P:YAXLib.Exceptions.YAXDefaultValueCannotBeAssigned.Message">
            <summary>
            Gets a message that describes the current exception.
            </summary>
            <value></value>
            <returns>
            The error message that explains the reason for the exception, or an empty string("").
            </returns>
        </member>
        <member name="T:YAXLib.Exceptions.YAXDeserializationException">
            <summary>
            Base class for all deserialization exceptions, which contains line and position info
            </summary>
        </member>
        <member name="M:YAXLib.Exceptions.YAXDeserializationException.#ctor(System.Xml.IXmlLineInfo,System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:YAXLib.Exceptions.YAXDeserializationException" /> class.
            </summary>
            <param name="lineInfo">IXmlLineInfo derived object, e.g. XElement, XAttribute containing line info</param>
            <param name="message">The message with exception details.</param>
        </member>
        <member name="M:YAXLib.Exceptions.YAXDeserializationException.#ctor(System.Int32,System.Int32,System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:YAXLib.Exceptions.YAXDeserializationException" /> class.
            </summary>
            <param name="lineNumber">The line number on which the error occurred</param>
            <param name="linePosition">The line position on which the error occurred</param>
            <param name="message">The message with exception details.</param>
        </member>
        <member name="P:YAXLib.Exceptions.YAXDeserializationException.HasLineInfo">
            <summary>
            Gets whether the exception has line information
            Note: if this is unexpectedly false, then most likely you need to specify LoadOptions.SetLineInfo on document load
            </summary>
        </member>
        <member name="P:YAXLib.Exceptions.YAXDeserializationException.LineNumber">
            <summary>
            Gets the line number on which the exception occurred
            </summary>
        </member>
        <member name="P:YAXLib.Exceptions.YAXDeserializationException.LinePosition">
            <summary>
            Gets the position at which the exception occurred
            </summary>
        </member>
        <member name="P:YAXLib.Exceptions.YAXDeserializationException.LineInfoMessage">
            <summary>
            Position string for use in error message
            </summary>
        </member>
        <member name="T:YAXLib.Exceptions.YAXElementMissingException">
            <summary>
            Raised when the element corresponding to some property is not present in the given XML file, when deserializing.
            This exception is raised during deserialization.
            </summary>
        </member>
        <member name="M:YAXLib.Exceptions.YAXElementMissingException.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:YAXLib.Exceptions.YAXElementMissingException" /> class.
            </summary>
            <param name="elemName">Name of the element.</param>
        </member>
        <member name="M:YAXLib.Exceptions.YAXElementMissingException.#ctor(System.String,System.Xml.IXmlLineInfo)">
            <summary>
            Initializes a new instance of the <see cref="T:YAXLib.Exceptions.YAXElementMissingException" /> class.
            </summary>
            <param name="elemName">Name of the element.</param>
            <param name="lineInfo">IXmlLineInfo derived object, e.g. XElement, XAttribute containing line info</param>
        </member>
        <member name="P:YAXLib.Exceptions.YAXElementMissingException.ElementName">
            <summary>
            Gets or the name of the element.
            </summary>
            <value>The name of the element.</value>
        </member>
        <member name="P:YAXLib.Exceptions.YAXElementMissingException.Message">
            <summary>
            Gets a message that describes the current exception.
            </summary>
            <value></value>
            <returns>
            The error message that explains the reason for the exception, or an empty string("").
            </returns>
        </member>
        <member name="T:YAXLib.Exceptions.YAXElementValueMissingException">
            <summary>
            Raised when the element value corresponding to some property is not present in the given XML file, when
            deserializing.
            This exception is raised during deserialization.
            </summary>
        </member>
        <member name="M:YAXLib.Exceptions.YAXElementValueMissingException.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:YAXLib.Exceptions.YAXAttributeMissingException" /> class.
            </summary>
            <param name="elementName">Name of the element.</param>
        </member>
        <member name="M:YAXLib.Exceptions.YAXElementValueMissingException.#ctor(System.String,System.Xml.IXmlLineInfo)">
            <summary>
            Initializes a new instance of the <see cref="T:YAXLib.Exceptions.YAXAttributeMissingException" /> class.
            </summary>
            <param name="elementName">Name of the element.</param>
            <param name="lineInfo">IXmlLineInfo derived object, e.g. XElement, XAttribute containing line info</param>
        </member>
        <member name="P:YAXLib.Exceptions.YAXElementValueMissingException.ElementName">
            <summary>
            Gets the name of the attribute.
            </summary>
            <value>The name of the attribute.</value>
        </member>
        <member name="P:YAXLib.Exceptions.YAXElementValueMissingException.Message">
            <summary>
            Gets a message that describes the current exception.
            </summary>
            <value></value>
            <returns>
            The error message that explains the reason for the exception, or an empty string("").
            </returns>
        </member>
        <member name="T:YAXLib.Exceptions.YAXEnumAliasException">
            <summary>
            The exception throws when trying to register an already existing <see cref="T:System.Enum" /> alias.
            This exception is raised during serialization and deserialization.
            </summary>
        </member>
        <member name="M:YAXLib.Exceptions.YAXEnumAliasException.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:YAXLib.Exceptions.YAXEnumAliasException" /> class.
            </summary>
        </member>
        <member name="M:YAXLib.Exceptions.YAXEnumAliasException.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:YAXLib.Exceptions.YAXEnumAliasException" /> class.
            </summary>
            <param name="message">The message.</param>
        </member>
        <member name="T:YAXLib.Exceptions.YAXException">
            <summary>
            The base for all exception classes of YAXLib
            </summary>
        </member>
        <member name="M:YAXLib.Exceptions.YAXException.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:YAXLib.Exceptions.YAXException" /> class.
            </summary>
        </member>
        <member name="M:YAXLib.Exceptions.YAXException.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:YAXLib.Exceptions.YAXException" /> class.
            </summary>
            <param name="message">The message.</param>
        </member>
        <member name="T:YAXLib.Exceptions.YAXObjectTypeMismatch">
            <summary>
            Raised when the object provided for serialization is not of the type provided for the serializer. This exception
            cannot be turned off.
            This exception is raised during serialization.
            </summary>
        </member>
        <member name="M:YAXLib.Exceptions.YAXObjectTypeMismatch.#ctor(System.Type,System.Type)">
            <summary>
            Initializes a new instance of the <see cref="T:YAXLib.Exceptions.YAXObjectTypeMismatch" /> class.
            </summary>
            <param name="expectedType">The expected type.</param>
            <param name="receivedType">The type of the object which did not match the expected type.</param>
        </member>
        <member name="P:YAXLib.Exceptions.YAXObjectTypeMismatch.ExpectedType">
            <summary>
            Gets the expected type.
            </summary>
            <value>The expected type.</value>
        </member>
        <member name="P:YAXLib.Exceptions.YAXObjectTypeMismatch.ReceivedType">
            <summary>
            Gets the type of the object which did not match the expected type.
            </summary>
            <value>The type of the object which did not match the expected type.</value>
        </member>
        <member name="P:YAXLib.Exceptions.YAXObjectTypeMismatch.Message">
            <summary>
            Gets a message that describes the current exception.
            </summary>
            <returns>
            The error message that explains the reason for the exception, or an empty string("").
            </returns>
        </member>
        <member name="T:YAXLib.Exceptions.YAXPolymorphicException">
            <summary>
            Class for the <see cref="T:YAXLib.Exceptions.YAXPolymorphicException" />.
            </summary>
        </member>
        <member name="M:YAXLib.Exceptions.YAXPolymorphicException.#ctor(System.String)">
            <summary>
            CTOR.
            </summary>
            <param name="message"></param>
        </member>
        <member name="T:YAXLib.Exceptions.YAXPropertyCannotBeAssignedTo">
            <summary>
            Raised when the value provided for some property in the XML input, cannot be
            assigned to the property.
            This exception is raised during deserialization.
            </summary>
        </member>
        <member name="M:YAXLib.Exceptions.YAXPropertyCannotBeAssignedTo.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:YAXLib.Exceptions.YAXPropertyCannotBeAssignedTo" /> class.
            </summary>
            <param name="propName">Name of the property.</param>
        </member>
        <member name="M:YAXLib.Exceptions.YAXPropertyCannotBeAssignedTo.#ctor(System.String,System.Xml.IXmlLineInfo)">
            <summary>
            Initializes a new instance of the <see cref="T:YAXLib.Exceptions.YAXPropertyCannotBeAssignedTo" /> class.
            </summary>
            <param name="propName">Name of the property.</param>
            <param name="lineInfo">IXmlLineInfo derived object, e.g. XElement, XAttribute containing line info</param>
        </member>
        <member name="P:YAXLib.Exceptions.YAXPropertyCannotBeAssignedTo.PropertyName">
            <summary>
            Gets the name of the property.
            </summary>
            <value>The name of the property.</value>
        </member>
        <member name="P:YAXLib.Exceptions.YAXPropertyCannotBeAssignedTo.Message">
            <summary>
            Gets a message that describes the current exception.
            </summary>
            <value></value>
            <returns>
            The error message that explains the reason for the exception, or an empty string("").
            </returns>
        </member>
        <member name="T:YAXLib.ICustomSerializer`1">
            <summary>
            Defines the interface to all custom serializers and deserializers.
            Note that normally you don't need to implement all the methods.
            </summary>
            <typeparam name="T">
            The type of field, property, class, or struct for which the custom serializer is provided.
            </typeparam>
        </member>
        <member name="M:YAXLib.ICustomSerializer`1.SerializeToAttribute(`0,System.Xml.Linq.XAttribute,YAXLib.Customization.ISerializationContext)">
            <summary>
            Serializes the given object and fills the provided reference to the
            XML attribute appropriately.
            <para>
            If the name of the provided attribute is changed, the custom serializer cannot be invoked when deserializing.
            </para>
            </summary>
            <param name="objectToSerialize">The object to serialize.</param>
            <param name="attrToFill">
            The XML attribute to fill. If the name of the provided attribute is changed, the custom
            serializer cannot be invoked when deserializing.
            </param>
            <param name="serializationContext">
            Contains information about the type and members of the
            <paramref name="objectToSerialize" />.
            </param>
        </member>
        <member name="M:YAXLib.ICustomSerializer`1.SerializeToElement(`0,System.Xml.Linq.XElement,YAXLib.Customization.ISerializationContext)">
            <summary>
            Serializes the given object and fills the provided reference to the
            XML element appropriately.
            <para>
            If the name of the provided element is changed, the custom serializer cannot be invoked when deserializing.
            </para>
            </summary>
            <param name="objectToSerialize">The object to serialize.</param>
            <param name="elemToFill">
            The XML element to fill. If the name of the provided element is changed, the custom serializer
            cannot be invoked when deserializing.
            </param>
            <param name="serializationContext">
            Contains information about the type and members of the
            <paramref name="objectToSerialize" />.
            </param>
        </member>
        <member name="M:YAXLib.ICustomSerializer`1.SerializeToValue(`0,YAXLib.Customization.ISerializationContext)">
            <summary>
            Serializes the given object to an string to be used as a value for an
            XML element.
            </summary>
            <param name="objectToSerialize">The object to serialize.</param>
            <param name="serializationContext">
            Contains information about the type and members of the
            <paramref name="objectToSerialize" />.
            </param>
            <returns></returns>
        </member>
        <member name="M:YAXLib.ICustomSerializer`1.DeserializeFromAttribute(System.Xml.Linq.XAttribute,YAXLib.Customization.ISerializationContext)">
            <summary>
            Deserializes from an xml attribute, and returns the retrieved value.
            You will normally need to use XAttribute.Value property only.
            </summary>
            <param name="attribute">The attribute to deserialize.</param>
            <param name="serializationContext">Contains information about the type and members of the object to deserialize.</param>
            <returns></returns>
        </member>
        <member name="M:YAXLib.ICustomSerializer`1.DeserializeFromElement(System.Xml.Linq.XElement,YAXLib.Customization.ISerializationContext)">
            <summary>
            Deserializes from an xml element, and returns the retrieved value.
            You might need to use XElement.Value, XElement.Nodes(),
            XElement.Attributes(), and XElement.Elements() only.
            </summary>
            <param name="element">The element to deserialize.</param>
            <param name="serializationContext">Contains information about the type and members of the object to deserialize.</param>
            <returns></returns>
        </member>
        <member name="M:YAXLib.ICustomSerializer`1.DeserializeFromValue(System.String,YAXLib.Customization.ISerializationContext)">
            <summary>
            Deserializes from a string value which has been serialized as the content of an element
            </summary>
            <param name="value">The string value to deserialize.</param>
            <param name="serializationContext">Contains information about the type and members of the object to deserialize.</param>
            <returns></returns>
        </member>
        <member name="T:YAXLib.IMemberDescriptor">
            <summary>
            Provides information about a member.
            </summary>
        </member>
        <member name="P:YAXLib.IMemberDescriptor.CanRead">
            <summary>
            Gets a value indicating whether the member can be read.
            </summary>
        </member>
        <member name="P:YAXLib.IMemberDescriptor.CanWrite">
            <summary>
            Gets a value indicating whether the member can be written to.
            </summary>
        </member>
        <member name="P:YAXLib.IMemberDescriptor.IsPublic">
            <summary>
            Gets a value indicating whether the member is public.
            </summary>
        </member>
        <member name="P:YAXLib.IMemberDescriptor.MemberType">
            <summary>
            Gets the type of the member.
            </summary>
        </member>
        <member name="P:YAXLib.IMemberDescriptor.Name">
            <summary>
            Gets the name of the member.
            </summary>
        </member>
        <member name="P:YAXLib.IMemberDescriptor.Type">
            <summary>
            Gets the data type of the member.
            </summary>
        </member>
        <member name="M:YAXLib.IMemberDescriptor.GetCustomAttributes">
            <summary>
            Retrieves an array of all custom attributes applied to the member.
            </summary>
            <returns>An array of all custom attributes applied to the member.</returns>
        </member>
        <member name="M:YAXLib.IMemberDescriptor.GetValue(System.Object,System.Object[])">
            <summary>
            Gets the value of the member for the specified object.
            </summary>
            <param name="obj">The object from which to retrieve the member value.</param>
            <param name="index">Optional index parameters for indexed properties.</param>
            <returns>The value of the member.</returns>
        </member>
        <member name="M:YAXLib.IMemberDescriptor.SetValue(System.Object,System.Object,System.Object[])">
            <summary>
            Sets the value of the member for the specified object.
            </summary>
            <param name="obj">The object on which to set the member value.</param>
            <param name="value">The value to be assigned to the member.</param>
            <param name="index">Optional index parameters for indexed properties.</param>
        </member>
        <member name="P:YAXLib.IRecursionCounter.RecursionCount">
            <summary>
            Gets or sets the number of recursions (number of total created <see cref="T:YAXLib.YAXSerializer" /> instances).
            </summary>
        </member>
        <member name="T:YAXLib.ITypeInspector">
            <summary>
            Provides type-specific information during serialization/deserialization.
            <para/>
            It is recommended to derive a custom <see cref="T:YAXLib.ITypeInspector"/> from the <see cref="T:YAXLib.DefaultTypeInspector"/>.
            <see cref="M:YAXLib.DefaultTypeInspector.GetMembers(System.Type,YAXLib.Options.SerializerOptions,System.Boolean)"/> will then return the default members for further processing.
            <see cref="M:YAXLib.DefaultTypeInspector.GetTypeName(System.Type,YAXLib.Options.SerializerOptions)"/> lets you define the type names.
            customization.
            </summary>
        </member>
        <member name="M:YAXLib.ITypeInspector.GetMembers(System.Type,YAXLib.Options.SerializerOptions,System.Boolean)">
            <summary>
            Retrieves the members to be serialized for the given type.
            </summary>
            <param name="type">The type for which to retrieve the member information.</param>
            <param name="options">Serializer options for controlling the serialization process.</param>
            <param name="includePrivateMembersFromBaseTypes" cref="P:YAXLib.Attributes.YAXSerializableTypeAttribute.IncludePrivateMembersFromBaseTypes">
            Specifies whether to include private members from base types in the collection.
            </param>
            <returns>An <see cref="T:System.Collections.Generic.IEnumerable`1"/> of <see cref="T:YAXLib.IMemberDescriptor"/> containing the member information for the specified type.</returns>
        </member>
        <member name="M:YAXLib.ITypeInspector.GetTypeName(System.Type,YAXLib.Options.SerializerOptions)">
            <summary>
            Gets the custom type name for the given type during serialization.
            </summary>
            <param name="type">The type for which to retrieve the type name.</param>
            <param name="options">Serializer options for controlling the serialization process.</param>
            <returns>A string representing the type name for the specified type.</returns>
        </member>
        <member name="T:YAXLib.IYAXSerializer`1">
            <summary>
            Serialize or deserialize <typeparamref name="T" />.
            </summary>
            <typeparam name="T"></typeparam>
        </member>
        <member name="P:YAXLib.IYAXSerializer`1.Options">
            <summary>
            Gets the <see cref="T:YAXLib.Options.SerializerOptions" /> settings
            to influence the process of serialization or de-serialization of <see cref="T:YAXLib.YAXSerializer" />s.
            </summary>
        </member>
        <member name="P:YAXLib.IYAXSerializer`1.ParsingErrors">
            <summary>
            Gets the parsing errors.
            </summary>
            <value>The parsing errors.</value>
        </member>
        <member name="M:YAXLib.IYAXSerializer`1.Serialize(`0)">
            <summary>
            Serializes the specified object and returns a string containing the XML.
            </summary>
            <param name="obj">The object to serialize.</param>
            <returns>A <code>System.String</code> containing the XML</returns>
        </member>
        <member name="M:YAXLib.IYAXSerializer`1.Serialize(`0,System.IO.TextWriter)">
            <summary>
            Serializes the specified object into a <c>TextWriter</c> instance.
            </summary>
            <param name="obj">The object to serialize.</param>
            <param name="textWriter">The <c>TextWriter</c> instance.</param>
        </member>
        <member name="M:YAXLib.IYAXSerializer`1.Serialize(`0,System.Xml.XmlWriter)">
            <summary>
            Serializes the specified object into a <c>XmlWriter</c> instance.
            </summary>
            <param name="obj">The object to serialize.</param>
            <param name="xmlWriter">The <c>XmlWriter</c> instance.</param>
        </member>
        <member name="M:YAXLib.IYAXSerializer`1.SerializeToXDocument(`0)">
            <summary>
            Serializes the specified object and returns an instance of <c>XDocument</c> containing the result.
            </summary>
            <param name="obj">The object to serialize.</param>
            <returns>An instance of <c>XDocument</c> containing the resulting XML</returns>
        </member>
        <member name="M:YAXLib.IYAXSerializer`1.SerializeToFile(`0,System.String)">
            <summary>
            Serializes the specified object to file.
            </summary>
            <param name="obj">The object to serialize.</param>
            <param name="fileName">Path to the file.</param>
        </member>
        <member name="M:YAXLib.IYAXSerializer`1.Deserialize(System.String)">
            <summary>
            Deserializes the specified string containing the XML serialization and returns an object.
            </summary>
            <param name="input">The input string containing the XML serialization.</param>
            <returns>The deserialized object.</returns>
        </member>
        <member name="M:YAXLib.IYAXSerializer`1.Deserialize(System.Xml.XmlReader)">
            <summary>
            Deserializes an object while reading input from an instance of <c>XmlReader</c>.
            </summary>
            <param name="xmlReader">The <c>XmlReader</c> instance to read input from.</param>
            <returns>The deserialized object.</returns>
        </member>
        <member name="M:YAXLib.IYAXSerializer`1.Deserialize(System.IO.TextReader)">
            <summary>
            Deserializes an object while reading input from an instance of <c>TextReader</c>.
            </summary>
            <param name="textReader">The <c>TextReader</c> instance to read input from.</param>
            <returns>The deserialized object.</returns>
        </member>
        <member name="M:YAXLib.IYAXSerializer`1.Deserialize(System.Xml.Linq.XElement)">
            <summary>
            Deserializes an object while reading from an instance of <c>XElement</c>
            </summary>
            <param name="element">The <c>XElement</c> instance to read from.</param>
            <returns>The deserialized object</returns>
        </member>
        <member name="M:YAXLib.IYAXSerializer`1.DeserializeFromFile(System.String)">
            <summary>
            Deserializes an object from the specified file which contains the XML serialization of the object.
            </summary>
            <param name="fileName">Path to the file.</param>
            <returns>The deserialized object.</returns>
        </member>
        <member name="M:YAXLib.IYAXSerializer`1.SetDeserializationBaseObject(`0)">
            <summary>
            Sets the object used as the base object in the next stage of de-serialization.
            This method enables multi-stage de-serialization for YAXLib.
            </summary>
            <param name="obj">The object used as the base object in the next stage of de-serialization.</param>
        </member>
        <member name="P:YAXLib.KnownTypes.ColorDynamicKnownType.TypeName">
            <inheritdoc />
        </member>
        <member name="M:YAXLib.KnownTypes.ColorDynamicKnownType.Serialize(System.Object,System.Xml.Linq.XElement,System.Xml.Linq.XNamespace,YAXLib.Customization.ISerializationContext)">
            <inheritdoc />
        </member>
        <member name="M:YAXLib.KnownTypes.ColorDynamicKnownType.Deserialize(System.Xml.Linq.XElement,System.Xml.Linq.XNamespace,YAXLib.Customization.ISerializationContext)">
            <inheritdoc />
        </member>
        <member name="P:YAXLib.KnownTypes.DataSetDynamicKnownType.TypeName">
            <inheritdoc />
        </member>
        <member name="M:YAXLib.KnownTypes.DataSetDynamicKnownType.Serialize(System.Object,System.Xml.Linq.XElement,System.Xml.Linq.XNamespace,YAXLib.Customization.ISerializationContext)">
            <inheritdoc />
        </member>
        <member name="M:YAXLib.KnownTypes.DataSetDynamicKnownType.Deserialize(System.Xml.Linq.XElement,System.Xml.Linq.XNamespace,YAXLib.Customization.ISerializationContext)">
            <inheritdoc />
        </member>
        <member name="P:YAXLib.KnownTypes.DataTableDynamicKnownType.TypeName">
            <inheritdoc />
        </member>
        <member name="M:YAXLib.KnownTypes.DataTableDynamicKnownType.Serialize(System.Object,System.Xml.Linq.XElement,System.Xml.Linq.XNamespace,YAXLib.Customization.ISerializationContext)">
            <inheritdoc />
        </member>
        <member name="M:YAXLib.KnownTypes.DataTableDynamicKnownType.Deserialize(System.Xml.Linq.XElement,System.Xml.Linq.XNamespace,YAXLib.Customization.ISerializationContext)">
            <inheritdoc />
        </member>
        <member name="M:YAXLib.KnownTypes.DateOnlyKnownType.Serialize(System.DateOnly,System.Xml.Linq.XElement,System.Xml.Linq.XNamespace,YAXLib.Customization.ISerializationContext)">
            <inheritdoc />
        </member>
        <member name="M:YAXLib.KnownTypes.DateOnlyKnownType.Deserialize(System.Xml.Linq.XElement,System.Xml.Linq.XNamespace,YAXLib.Customization.ISerializationContext)">
            <inheritdoc />
        </member>
        <member name="M:YAXLib.KnownTypes.DbNullKnownType.Serialize(System.DBNull,System.Xml.Linq.XElement,System.Xml.Linq.XNamespace,YAXLib.Customization.ISerializationContext)">
            <inheritdoc />
        </member>
        <member name="M:YAXLib.KnownTypes.DbNullKnownType.Deserialize(System.Xml.Linq.XElement,System.Xml.Linq.XNamespace,YAXLib.Customization.ISerializationContext)">
            <inheritdoc />
        </member>
        <member name="T:YAXLib.KnownTypes.DynamicKnownTypeBase">
            <summary>
            A <see cref="T:YAXLib.KnownTypes.DynamicKnownTypeBase" /> is the base class for <see cref="P:YAXLib.KnownTypes.DynamicKnownTypeBase.Type" />s,
            for which the full type name is defined at compile time.
            The actual type is determined at runtime.
            </summary>
        </member>
        <member name="P:YAXLib.KnownTypes.DynamicKnownTypeBase.TypeName">
            <summary>
            Gets or sets the name of the <seealso cref="P:YAXLib.KnownTypes.DynamicKnownTypeBase.Type" />.
            </summary>
        </member>
        <member name="P:YAXLib.KnownTypes.DynamicKnownTypeBase.Type">
            <inheritdoc />
        </member>
        <member name="M:YAXLib.KnownTypes.DynamicKnownTypeBase.Serialize(System.Object,System.Xml.Linq.XElement,System.Xml.Linq.XNamespace,YAXLib.Customization.ISerializationContext)">
            <inheritdoc />
        </member>
        <member name="M:YAXLib.KnownTypes.DynamicKnownTypeBase.Deserialize(System.Xml.Linq.XElement,System.Xml.Linq.XNamespace,YAXLib.Customization.ISerializationContext)">
            <inheritdoc />
        </member>
        <member name="T:YAXLib.KnownTypes.ExceptionKnownBaseType">
            <summary>
            Class for serialization and deserialization of <see cref="T:System.Exception" />s and its derived classes.
            <para>
            We <b>must not</b> use a custom serializer for Exception types, as this known type class is expected
            to process exceptions. Doing different may lead to an infinite loop.
            </para>
            <para>
            <see cref="F:YAXLib.Enums.YAXSerializationOptions.SuppressMetadataAttributes" /> <b>must not</b> be set during
            serialization, when deserialization of exceptions is intended.
            </para>
            </summary>
        </member>
        <member name="M:YAXLib.KnownTypes.ExceptionKnownBaseType.Serialize(System.Exception,System.Xml.Linq.XElement,System.Xml.Linq.XNamespace,YAXLib.Customization.ISerializationContext)">
            <inheritdoc />
        </member>
        <member name="M:YAXLib.KnownTypes.ExceptionKnownBaseType.Serialize(System.Exception,System.Xml.Linq.XElement,System.Xml.Linq.XNamespace,YAXLib.Customization.ISerializationContext,System.Boolean)">
            <summary>
            Serialize an <see cref="T:System.Exception" />.
            May be called recursively
            </summary>
        </member>
        <member name="M:YAXLib.KnownTypes.ExceptionKnownBaseType.Deserialize(System.Xml.Linq.XElement,System.Xml.Linq.XNamespace,YAXLib.Customization.ISerializationContext)">
            <inheritdoc />
        </member>
        <member name="M:YAXLib.KnownTypes.ExceptionKnownBaseType.Deserialize(System.Xml.Linq.XElement,System.Xml.Linq.XNamespace,YAXLib.Customization.ISerializationContext,System.Boolean)">
            <summary>
            Deserialize an <see cref="T:System.Xml.Linq.XElement" /> containing exception details.
            May be called recursively
            </summary>
        </member>
        <member name="T:YAXLib.KnownTypes.IKnownType">
            <summary>
            Interface for all known type classes.
            </summary>
        </member>
        <member name="P:YAXLib.KnownTypes.IKnownType.Type">
            <summary>
            Gets the underlying known type.
            </summary>
        </member>
        <member name="M:YAXLib.KnownTypes.IKnownType.Serialize(System.Object,System.Xml.Linq.XElement,System.Xml.Linq.XNamespace,YAXLib.Customization.ISerializationContext)">
            <summary>
            Serializes the object into the specified XML element.
            </summary>
            <param name="obj">The object to serialize.</param>
            <param name="elem">The XML element.</param>
            <param name="overridingNamespace">The namespace the element belongs to.</param>
            <param name="serializationContext">Contains information about the type and members of the <paramref name="obj" />.</param>
        </member>
        <member name="M:YAXLib.KnownTypes.IKnownType.Deserialize(System.Xml.Linq.XElement,System.Xml.Linq.XNamespace,YAXLib.Customization.ISerializationContext)">
            <summary>
            Deserializes the specified XML element to the known type.
            </summary>
            <param name="elem">The XML element to deserialize object from.</param>
            <param name="overridingNamespace">The namespace the element belongs to.</param>
            <param name="serializationContext">Contains information about the type and members of the object to deserialize.</param>
            <returns>The deserialized object</returns>
        </member>
        <member name="T:YAXLib.KnownTypes.KnownBaseTypeBase`1">
            <summary>
            Abstract base class for predefined serializers and deserializers for known base types.
            Classes derived from the base class of type <typeparamref name="T" /> will be serialized and deserialized.
            </summary>
            <typeparam name="T">The underlying known type</typeparam>
        </member>
        <member name="P:YAXLib.KnownTypes.KnownBaseTypeBase`1.Type">
            <inheritdoc />
        </member>
        <member name="M:YAXLib.KnownTypes.KnownBaseTypeBase`1.YAXLib#KnownTypes#IKnownType#Serialize(System.Object,System.Xml.Linq.XElement,System.Xml.Linq.XNamespace,YAXLib.Customization.ISerializationContext)">
            <inheritdoc />
        </member>
        <member name="M:YAXLib.KnownTypes.KnownBaseTypeBase`1.YAXLib#KnownTypes#IKnownType#Deserialize(System.Xml.Linq.XElement,System.Xml.Linq.XNamespace,YAXLib.Customization.ISerializationContext)">
            <inheritdoc />
        </member>
        <member name="M:YAXLib.KnownTypes.KnownBaseTypeBase`1.Serialize(`0,System.Xml.Linq.XElement,System.Xml.Linq.XNamespace,YAXLib.Customization.ISerializationContext)">
            <summary>
            Serializes the object into the specified XML element.
            </summary>
            <param name="obj">The object to serialize.</param>
            <param name="elem">The XML element.</param>
            <param name="overridingNamespace">The namespace the element belongs to.</param>
            <param name="serializationContext">The serialization context.</param>
        </member>
        <member name="M:YAXLib.KnownTypes.KnownBaseTypeBase`1.Deserialize(System.Xml.Linq.XElement,System.Xml.Linq.XNamespace,YAXLib.Customization.ISerializationContext)">
            <summary>
            Deserializes the specified XML element to the known type.
            </summary>
            <param name="elem">The XML element to deserialize object from.</param>
            <param name="overridingNamespace">The namespace the element belongs to.</param>
            <param name="serializationContext">The serialization context.</param>
            <returns>The deserialized object</returns>
        </member>
        <member name="T:YAXLib.KnownTypes.KnownTypeBase`1">
            <summary>
            Abstract base class for predefined serializers and deserializers for known types.
            </summary>
            <typeparam name="T">The underlying known type</typeparam>
        </member>
        <member name="P:YAXLib.KnownTypes.KnownTypeBase`1.Type">
            <inheritdoc />
        </member>
        <member name="M:YAXLib.KnownTypes.KnownTypeBase`1.YAXLib#KnownTypes#IKnownType#Serialize(System.Object,System.Xml.Linq.XElement,System.Xml.Linq.XNamespace,YAXLib.Customization.ISerializationContext)">
            <inheritdoc />
        </member>
        <member name="M:YAXLib.KnownTypes.KnownTypeBase`1.YAXLib#KnownTypes#IKnownType#Deserialize(System.Xml.Linq.XElement,System.Xml.Linq.XNamespace,YAXLib.Customization.ISerializationContext)">
            <inheritdoc />
        </member>
        <member name="M:YAXLib.KnownTypes.KnownTypeBase`1.Serialize(`0,System.Xml.Linq.XElement,System.Xml.Linq.XNamespace,YAXLib.Customization.ISerializationContext)">
            <summary>
            Serializes the object into the specified XML element.
            </summary>
            <param name="obj">The object to serialize.</param>
            <param name="elem">The XML element.</param>
            <param name="overridingNamespace">The namespace the element belongs to.</param>
            <param name="serializationContext">The serialization context.</param>
        </member>
        <member name="M:YAXLib.KnownTypes.KnownTypeBase`1.Deserialize(System.Xml.Linq.XElement,System.Xml.Linq.XNamespace,YAXLib.Customization.ISerializationContext)">
            <summary>
            Deserializes the specified XML element to the known type.
            </summary>
            <param name="elem">The XML element to deserialize object from.</param>
            <param name="overridingNamespace">The namespace the element belongs to.</param>
            <param name="serializationContext">The serialization context.</param>
            <returns>The deserialized object</returns>
        </member>
        <member name="P:YAXLib.KnownTypes.RectangleDynamicKnownType.TypeName">
            <inheritdoc />
        </member>
        <member name="M:YAXLib.KnownTypes.RectangleDynamicKnownType.Serialize(System.Object,System.Xml.Linq.XElement,System.Xml.Linq.XNamespace,YAXLib.Customization.ISerializationContext)">
            <inheritdoc />
        </member>
        <member name="M:YAXLib.KnownTypes.RectangleDynamicKnownType.Deserialize(System.Xml.Linq.XElement,System.Xml.Linq.XNamespace,YAXLib.Customization.ISerializationContext)">
            <inheritdoc />
        </member>
        <member name="P:YAXLib.KnownTypes.RuntimeTypeDynamicKnownType.TypeName">
            <inheritdoc />
        </member>
        <member name="M:YAXLib.KnownTypes.RuntimeTypeDynamicKnownType.Serialize(System.Object,System.Xml.Linq.XElement,System.Xml.Linq.XNamespace,YAXLib.Customization.ISerializationContext)">
            <inheritdoc />
        </member>
        <member name="M:YAXLib.KnownTypes.RuntimeTypeDynamicKnownType.Deserialize(System.Xml.Linq.XElement,System.Xml.Linq.XNamespace,YAXLib.Customization.ISerializationContext)">
            <inheritdoc />
        </member>
        <member name="M:YAXLib.KnownTypes.TimeOnlyKnownType.Serialize(System.TimeOnly,System.Xml.Linq.XElement,System.Xml.Linq.XNamespace,YAXLib.Customization.ISerializationContext)">
            <inheritdoc />
        </member>
        <member name="M:YAXLib.KnownTypes.TimeOnlyKnownType.Deserialize(System.Xml.Linq.XElement,System.Xml.Linq.XNamespace,YAXLib.Customization.ISerializationContext)">
            <inheritdoc />
        </member>
        <member name="M:YAXLib.KnownTypes.TimeSpanKnownType.Serialize(System.TimeSpan,System.Xml.Linq.XElement,System.Xml.Linq.XNamespace,YAXLib.Customization.ISerializationContext)">
            <inheritdoc />
        </member>
        <member name="M:YAXLib.KnownTypes.TimeSpanKnownType.Deserialize(System.Xml.Linq.XElement,System.Xml.Linq.XNamespace,YAXLib.Customization.ISerializationContext)">
            <inheritdoc />
        </member>
        <member name="M:YAXLib.KnownTypes.TypeKnownType.Serialize(System.Type,System.Xml.Linq.XElement,System.Xml.Linq.XNamespace,YAXLib.Customization.ISerializationContext)">
            <inheritdoc />
        </member>
        <member name="M:YAXLib.KnownTypes.TypeKnownType.Deserialize(System.Xml.Linq.XElement,System.Xml.Linq.XNamespace,YAXLib.Customization.ISerializationContext)">
            <inheritdoc />
        </member>
        <member name="T:YAXLib.KnownTypes.WellKnownTypes">
            <summary>
            Provides serialization and deserialization methods for known types.
            The target of a <see cref="T:YAXLib.KnownTypes.KnownTypeBase`1" /> may be defined at compile time or runtime.
            </summary>
        </member>
        <member name="F:YAXLib.KnownTypes.WellKnownTypes._dictKnownTypes">
            <summary>
            This dictionary stores the known types derived from <see cref="T:YAXLib.KnownTypes.KnownTypeBase`1" />.
            <para>
            The underlying type of this known type is determined at compile time.
            </para>
            </summary>
            <example>Simple .NET built-in types like <see cref="T:System.TimeSpan" />, <see cref="T:System.DBNull" /> and others.</example>
        </member>
        <member name="F:YAXLib.KnownTypes.WellKnownTypes._dictKnownBaseTypes">
            <summary>
            This dictionary stores the known <b>base</b> classes for other classes.
            That allows to have one <see cref="T:YAXLib.KnownTypes.KnownTypeBase`1" /> implementation for all the derived classes.
            </summary>
            <para>
            The underlying type of this known type is determined at compile time.
            </para>
            <example>
            For an <see cref="T:System.ArgumentException" />
            the known base class is <see cref="T:System.Exception" />.
            </example>
        </member>
        <member name="F:YAXLib.KnownTypes.WellKnownTypes._dictDynamicKnownTypes">
            <summary>
            This dictionary stores the known types derived from <see cref="T:YAXLib.KnownTypes.DynamicKnownTypeBase" />.
            <para>
            For classes derived from the <see cref="T:YAXLib.KnownTypes.DynamicKnownTypeBase" /> base class,
            the <b>full type name</b> is defined at compile time.
            The underlying type of this known type is determined at runtime.
            </para>
            </summary>
            <example>
            <see cref="T:System.Drawing.Rectangle" />, <see cref="T:System.Drawing.Color" />,
            <see cref="T:System.Data.DataTable" /> and others.
            </example>
        </member>
        <member name="M:YAXLib.KnownTypes.WellKnownTypes.Add``1(YAXLib.KnownTypes.KnownTypeBase{``0})">
            <summary>
            Adds a known type to the dictionary of known types.
            </summary>
            <param name="knownType">The known type to add.</param>
        </member>
        <member name="M:YAXLib.KnownTypes.WellKnownTypes.Add(YAXLib.KnownTypes.DynamicKnownTypeBase)">
            <summary>
            Adds a dynamic known type to the dictionary of known types.
            </summary>
            <param name="dynamicKnownType">The dynamic known type to add.</param>
        </member>
        <member name="M:YAXLib.KnownTypes.WellKnownTypes.Add``1(YAXLib.KnownTypes.KnownBaseTypeBase{``0})">
            <summary>
            Adds a known base type to the dictionary of known types.
            </summary>
            <param name="knownBaseType">The known base type to add.</param>
        </member>
        <member name="M:YAXLib.KnownTypes.WellKnownTypes.Remove(System.Type)">
            <summary>
            Removes the <see cref="T:YAXLib.KnownTypes.IKnownType" /> for <paramref name="theType" /> from the list of well-known types.
            </summary>
            <param name="theType">The known type to remove.</param>
            <returns><see langword="true" />, if the type was removed successfully.</returns>
        </member>
        <member name="M:YAXLib.KnownTypes.WellKnownTypes.Clear">
            <summary>
            Removes all known types.
            </summary>
        </member>
        <member name="M:YAXLib.KnownTypes.WellKnownTypes.RestoreDefault">
            <summary>
            Clears all known types and restores the default known types.
            </summary>
        </member>
        <member name="M:YAXLib.KnownTypes.WellKnownTypes.TryGetKnownType(System.Type,YAXLib.KnownTypes.IKnownType@)">
            <summary>
            Searches the known type dictionaries for the a <see cref="T:YAXLib.KnownTypes.IKnownType" /> for the requested <paramref name="type" />.
            </summary>
            <param name="type">The requested <see cref="T:System.Type" /></param>
            <param name="knownType">The <see cref="T:YAXLib.KnownTypes.IKnownType" />, if found.</param>
            <returns><see langword="true" />, if an <see cref="T:YAXLib.KnownTypes.IKnownType" /> for the requested <paramref name="type" /> was found.</returns>
        </member>
        <member name="M:YAXLib.KnownTypes.XAttributeKnownType.Serialize(System.Xml.Linq.XAttribute,System.Xml.Linq.XElement,System.Xml.Linq.XNamespace,YAXLib.Customization.ISerializationContext)">
            <inheritdoc />
        </member>
        <member name="M:YAXLib.KnownTypes.XAttributeKnownType.Deserialize(System.Xml.Linq.XElement,System.Xml.Linq.XNamespace,YAXLib.Customization.ISerializationContext)">
            <inheritdoc />
        </member>
        <member name="M:YAXLib.KnownTypes.XElementKnownType.Serialize(System.Xml.Linq.XElement,System.Xml.Linq.XElement,System.Xml.Linq.XNamespace,YAXLib.Customization.ISerializationContext)">
            <inheritdoc />
        </member>
        <member name="M:YAXLib.KnownTypes.XElementKnownType.Deserialize(System.Xml.Linq.XElement,System.Xml.Linq.XNamespace,YAXLib.Customization.ISerializationContext)">
            <inheritdoc />
        </member>
        <member name="T:YAXLib.MemberWrapper">
            <summary>
            A wrapper class for members which only can be properties or member variables
            </summary>
        </member>
        <member name="F:YAXLib.MemberWrapper._isPublic">
            <summary>
            Returns <see langword="true" />, when the member corresponding to this instance is public.
            </summary>
            <value>
            <see langword="true" /> if the member corresponding to this instance is public; otherwise,
            <see langword="false" />.
            </value>
        </member>
        <member name="F:YAXLib.MemberWrapper._alias">
            <summary>
            The alias specified by the user
            </summary>
        </member>
        <member name="F:YAXLib.MemberWrapper._isSerializedAsAttribute">
            <summary>
            specifies whether this member is going to be serialized as an attribute
            </summary>
        </member>
        <member name="F:YAXLib.MemberWrapper._isSerializedAsValue">
            <summary>
            specifies whether this member is going to be serialized as a value for another element
            </summary>
        </member>
        <member name="F:YAXLib.MemberWrapper._namespace">
            <summary>
            The xml-namespace this member is going to be serialized under.
            </summary>
        </member>
        <member name="F:YAXLib.MemberWrapper._serializationLocation">
            <summary>
            The location of the serialization
            </summary>
        </member>
        <member name="M:YAXLib.MemberWrapper.#ctor(YAXLib.IMemberDescriptor,YAXLib.Options.SerializerOptions)">
            <summary>
            Initializes a new instance of the <see cref="T:YAXLib.MemberWrapper" /> class.
            </summary>
            <param name="memberDescriptor">The member-descriptor to build this instance from.</param>
            <param name="serializerOptions">The <see cref="T:YAXLib.Options.SerializerOptions" /> to use.</param>
        </member>
        <member name="P:YAXLib.MemberWrapper.Alias">
            <summary>
            Gets the alias specified for this member.
            </summary>
            <value>The alias specified for this member.</value>
        </member>
        <member name="P:YAXLib.MemberWrapper.CanRead">
            <summary>
            Gets a value indicating whether the member corresponding to this instance can be read from.
            </summary>
            <value><c>true</c> if the member corresponding to this instance can be read from; otherwise, <c>false</c>.</value>
        </member>
        <member name="P:YAXLib.MemberWrapper.CanWrite">
            <summary>
            Gets a value indicating whether the member corresponding to this instance can be written to.
            </summary>
            <value><c>true</c> if the member corresponding to this instance can be written to; otherwise, <c>false</c>.</value>
        </member>
        <member name="P:YAXLib.MemberWrapper.Comment">
            <summary>
            Gets an array of comment lines.
            </summary>
            <value>The comment lines.</value>
        </member>
        <member name="P:YAXLib.MemberWrapper.DefaultValue">
            <summary>
            Gets the default value for this instance.
            </summary>
            <value>The default value for this instance.</value>
        </member>
        <member name="P:YAXLib.MemberWrapper.Format">
            <summary>
            Gets the format specified for this value; <c>null</c> if no format is specified.
            </summary>
            <value>the format specified for this value; <c>null</c> if no format is specified.</value>
        </member>
        <member name="P:YAXLib.MemberWrapper.HasComment">
            <summary>
            Gets a value indicating whether this instance has comments.
            </summary>
            <value>
            <c>true</c> if this instance has comments; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="P:YAXLib.MemberWrapper.HasFormat">
            <summary>
            Gets a value indicating whether this instance has format values specified
            </summary>
            <value>
            <c>true</c> if this instance has format values specified; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="P:YAXLib.MemberWrapper.IsAttributedAsDontSerialize">
            <summary>
            Gets a value indicating whether this instance is attributed as don't serialize.
            </summary>
            <value>
            <c>true</c> if this instance is attributed as don't serialize; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="P:YAXLib.MemberWrapper.IsAttributedAsNotCollection">
            <summary>
            Gets a value indicating whether this instance is attributed as not-collection.
            </summary>
            <value>
            <c>true</c> if this instance is attributed as not-collection; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="P:YAXLib.MemberWrapper.IsAttributedAsSerializable">
            <summary>
            Gets a value indicating whether this instance is attributed as serializable.
            </summary>
            <value>
            <c>true</c> if this instance is attributed as serializable; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="P:YAXLib.MemberWrapper.IsAttributedAsDontSerializeIfNull">
            <summary>
            Gets a value indicating whether this instance is attributed as don't serialize when null.
            </summary>
            <value>
            <c>true</c> if this instance is attributed as don't serialize when null; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="P:YAXLib.MemberWrapper.IsSerializedAsAttribute">
            <summary>
            Gets a value indicating whether this instance is serialized as an XML attribute.
            </summary>
            <value>
            <c>true</c> if this instance is serialized as an XML attribute; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="P:YAXLib.MemberWrapper.IsSerializedAsValue">
            <summary>
            Gets a value indicating whether this instance is serialized as a value for an element.
            </summary>
            <value>
            <c>true</c> if this instance is serialized as a value for an element; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="P:YAXLib.MemberWrapper.IsSerializedAsElement">
            <summary>
            Gets a value indicating whether this instance is serialized as an XML element.
            </summary>
            <value>
            <c>true</c> if this instance is serialized as an XML element; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="P:YAXLib.MemberWrapper.TextEmbedding">
            <inheritdoc cref="T:YAXLib.Enums.TextEmbedding" />
        </member>
        <member name="P:YAXLib.MemberWrapper.MemberType">
            <summary>
            Gets the type of the member.
            </summary>
            <value>The type of the member.</value>
        </member>
        <member name="P:YAXLib.MemberWrapper.MemberDescriptor">
            <summary>
            Gets the <see cref="T:YAXLib.IMemberDescriptor" />.
            </summary>
        </member>
        <member name="P:YAXLib.MemberWrapper.UdtWrapper">
            <summary>
            Gets the type wrapper instance corresponding to the member-type of this instance.
            </summary>
            <value>The type wrapper instance corresponding to the member-type of this instance.</value>
        </member>
        <member name="P:YAXLib.MemberWrapper.KnownType">
            <summary>
            Gets the <see cref="T:YAXLib.KnownTypes.IKnownType" /> if the <see cref="P:YAXLib.MemberWrapper.MemberType" />
            is a known type, else <see langword="null" />
            </summary>
        </member>
        <member name="P:YAXLib.MemberWrapper.IsKnownType">
            <summary>
            Returns <see langword="true" /> if the if the <see cref="P:YAXLib.MemberWrapper.MemberType" /> is an <see cref="T:YAXLib.KnownTypes.IKnownType" />.
            </summary>
        </member>
        <member name="P:YAXLib.MemberWrapper.OriginalName">
            <summary>
            Gets the original of this member (as opposed to its alias).
            </summary>
            <value>The original of this member .</value>
        </member>
        <member name="P:YAXLib.MemberWrapper.SerializationLocation">
            <summary>
            Gets the serialization location.
            </summary>
            <value>The serialization location.</value>
        </member>
        <member name="P:YAXLib.MemberWrapper.TreatErrorsAs">
            <summary>
            Gets the exception type for this instance in case of encountering missing values
            </summary>
            <value>The exception type for this instance in case of encountering missing values</value>
        </member>
        <member name="P:YAXLib.MemberWrapper.CollectionAttributeInstance">
            <summary>
            Gets the collection attribute instance.
            </summary>
            <value>The collection attribute instance.</value>
        </member>
        <member name="P:YAXLib.MemberWrapper.DictionaryAttributeInstance">
            <summary>
            Gets the dictionary attribute instance.
            </summary>
            <value>The dictionary attribute instance.</value>
        </member>
        <member name="P:YAXLib.MemberWrapper.IsTreatedAsCollection">
            <summary>
            Gets a value indicating whether this instance is treated as a collection.
            </summary>
            <value>
            <c>true</c> if this instance is treated as a collection; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="P:YAXLib.MemberWrapper.IsTreatedAsDictionary">
            <summary>
            Gets a value indicating whether this instance is treated as a dictionary.
            </summary>
            <value>
            <c>true</c> if this instance is treated as a dictionary; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="P:YAXLib.MemberWrapper.CustomSerializer">
            <summary>
            Gets or sets the wrapper for an <see cref="T:YAXLib.ICustomSerializer`1" /> instance.
            </summary>
            <value>The wrapper for an <see cref="T:YAXLib.ICustomSerializer`1" /> instance.</value>
        </member>
        <member name="P:YAXLib.MemberWrapper.HasCustomSerializer">
            <summary>
            Gets a value indicating whether this instance has custom serializer.
            </summary>
            <value>
            <c>true</c> if this instance has custom serializer; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="P:YAXLib.MemberWrapper.HasNamespace">
            <summary>
            Gets a value indicating whether this instance has a custom namespace
            defined for it through the <see cref="T:YAXLib.Attributes.YAXNamespaceAttribute" /> attribute.
            </summary>
        </member>
        <member name="P:YAXLib.MemberWrapper.Namespace">
            <summary>
            Gets the namespace associated with this element.
            </summary>
            <remarks>
            If <see cref="P:YAXLib.MemberWrapper.HasNamespace" /> is <c>false</c> then this should
            be inherited from any parent elements.
            </remarks>
        </member>
        <member name="P:YAXLib.MemberWrapper.NamespacePrefix">
            <summary>
            Gets the namespace prefix associated with this element
            </summary>
            <remarks>
            If <see cref="P:YAXLib.MemberWrapper.HasNamespace" /> is <c>false</c> then this should
            be inherited from any parent elements.
            If this is <c>null</c>, then it should be assumed that the specified
            <see cref="P:YAXLib.MemberWrapper.Namespace" /> (if it is present) is the default namespace.
            It should also be noted that if a namespace is not provided for the
            entire document (default namespace) and yet a default namespace is
            provided for one element that an exception should be thrown (since
            setting a default namespace for that element would make it apply to
            the whole document).
            </remarks>
        </member>
        <member name="M:YAXLib.MemberWrapper.GetOriginalValue(System.Object,System.Object[])">
            <summary>
            Gets the original value of this member in the specified object
            </summary>
            <param name="obj">The object whose value corresponding to this instance, must be retrieved.</param>
            <param name="index">
            Optional index values for indexed properties.
            The indexes of indexed properties are zero-based. This value should be <see langword="null" /> for non-indexed
            properties.
            </param>
            <returns>the original value of this member in the specified object</returns>
        </member>
        <member name="M:YAXLib.MemberWrapper.GetValue(System.Object)">
            <summary>
            Gets the processed value of this member in the specified object
            </summary>
            <param name="obj">The object whose value corresponding to this instance, must be retrieved.</param>
            <returns>the processed value of this member in the specified object</returns>
        </member>
        <member name="M:YAXLib.MemberWrapper.SetValue(System.Object,System.Object)">
            <summary>
            Sets the value of this member in the specified object
            </summary>
            <param name="obj">The object whose member corresponding to this instance, must be given value.</param>
            <param name="value">The value.</param>
        </member>
        <member name="M:YAXLib.MemberWrapper.IsAllowedToBeSerialized(YAXLib.Enums.YAXSerializationFields,System.Boolean)">
            <summary>
            Determines whether this instance of <see cref="T:YAXLib.MemberWrapper" /> is allowed to be serialized.
            This method evaluates <see cref="T:System.Boolean" />s and <see cref="T:System.Enum" />s (no expensive reflection methods).
            </summary>
            <param name="serializationFields">The <see cref="T:YAXLib.Enums.YAXSerializationFields" /> setting.</param>
            <param name="dontSerializePropertiesWithNoSetter">Skip serialization of fields which doesn't have a setter.</param>
            <returns>
            <see langword="true" /> if this instance of <see cref="T:YAXLib.MemberWrapper" /> is allowed to be serialized; otherwise,
            <see langword="false" />.
            </returns>
        </member>
        <member name="M:YAXLib.MemberWrapper.ToString">
            <summary>
            Returns a <see cref="T:System.String" /> that represents the current <see cref="T:System.Object" />.
            </summary>
            <returns>
            A <see cref="T:System.String" /> that represents the current <see cref="T:System.Object" />.
            </returns>
        </member>
        <member name="M:YAXLib.MemberWrapper.InitInstance">
            <summary>
            Initializes this instance of <c>MemberWrapper</c>.
            </summary>
        </member>
        <member name="M:YAXLib.MemberWrapper.InitDefaultValue">
            <summary>
            Initializes the default value for this instance of <c>MemberWrapper</c>.
            </summary>
        </member>
        <member name="M:YAXLib.MemberWrapper.IsAllowedToProcess">
            <summary>
            Called by the following attributes implementing <see cref="M:YAXLib.IYaxMemberLevelAttribute.Setup(YAXLib.MemberWrapper)" />:
            <see cref="T:YAXLib.Attributes.YAXAttributeForClassAttribute" />, <see cref="T:YAXLib.Attributes.YAXValueForClassAttribute" />,
            <see cref="T:YAXLib.Attributes.YAXAttributeForAttribute" />
            <see cref="T:YAXLib.Attributes.YAXValueForAttribute" />.
            </summary>
            <returns><see langword="true" />, if processing is allowed.</returns>
            <remarks>MemberWrapper processes YAXCustomSerializerAttribute and YAXCollectionAttribute first.</remarks>
        </member>
        <member name="M:YAXLib.MemberWrapper.AddAttributeToListOfRealTypes(YAXLib.Attributes.YAXTypeAttribute)">
            <summary>
            Adds the <paramref name="yaxTypeAttribute" /> to the list of possible real types.
            </summary>
            <param name="yaxTypeAttribute"></param>
            <exception cref="T:YAXLib.Exceptions.YAXPolymorphicException"></exception>
        </member>
        <member name="M:YAXLib.MemberWrapper.AddAttributeToCollectionItemRealTypes(YAXLib.Attributes.YAXCollectionItemTypeAttribute)">
            <summary>
            Adds the <paramref name="yaxCollectionItemTypeAttr" /> to the list of collection item real types.
            </summary>
            <param name="yaxCollectionItemTypeAttr"></param>
            <exception cref="T:YAXLib.Exceptions.YAXPolymorphicException"></exception>
        </member>
        <member name="T:YAXLib.Options.SerializerOptions">
            <summary>
            Settings to influence the process of serialization or de-serialization of <see cref="T:YAXLib.YAXSerializer" />s.
            </summary>
        </member>
        <member name="M:YAXLib.Options.SerializerOptions.#ctor">
            <summary>
            Creates a new instances of settings to influence the process of
            serialization or de-serialization of <see cref="T:YAXLib.YAXSerializer" />s.
            </summary>
        </member>
        <member name="P:YAXLib.Options.SerializerOptions.ExceptionHandlingPolicies">
            <summary>
            Gets or sets the kinds of <see cref="T:YAXLib.Enums.YAXExceptionHandlingPolicies" />.
            </summary>
        </member>
        <member name="P:YAXLib.Options.SerializerOptions.ExceptionBehavior">
            <summary>
            Gets or sets the behavior when <see cref="T:System.Exception" />s are thrown.
            </summary>
        </member>
        <member name="P:YAXLib.Options.SerializerOptions.SerializationOptions">
            <summary>
            Gets or sets the <see cref="T:YAXLib.Enums.YAXSerializationOptions" /> for serialization and/or de-serialization.
            </summary>
        </member>
        <member name="P:YAXLib.Options.SerializerOptions.AttributeName">
            <summary>
            Definitions for special attribute names.
            </summary>
        </member>
        <member name="P:YAXLib.Options.SerializerOptions.Namespace">
            <summary>
            XML Namespace definitions for the <see cref="T:YAXLib.YAXSerializer" />.
            </summary>
        </member>
        <member name="P:YAXLib.Options.SerializerOptions.MaxRecursion">
            <summary>
            Specifies the maximum serialization depth.
            This roughly equals the maximum element depth of the resulting XML.
            1 means an empty XML tag with no content.
            For unlimited depth set <see cref="F:System.Int32.MaxValue" />.
            </summary>
        </member>
        <member name="P:YAXLib.Options.SerializerOptions.Culture">
            <summary>
            Gets or sets the <see cref="T:System.Globalization.CultureInfo" /> for serialization and de-serialization.
            Default is <see cref="P:System.Globalization.CultureInfo.CurrentCulture" />.
            </summary>
        </member>
        <member name="P:YAXLib.Options.SerializerOptions.TypeInspector">
            <summary>
            Gets or sets the <see cref="T:YAXLib.ITypeInspector"/>. Is set to <see cref="T:YAXLib.DefaultTypeInspector"/> by default.
            <para/>
            With a custom <see cref="T:YAXLib.ITypeInspector"/> it is possible to control
            which members are serialized/deserialized, and which type names are used for a given type.
            <para/>
            It is recommended to derive a custom <see cref="T:YAXLib.ITypeInspector"/> from the <see cref="T:YAXLib.DefaultTypeInspector"/>.
            <see cref="M:YAXLib.DefaultTypeInspector.GetMembers(System.Type,YAXLib.Options.SerializerOptions,System.Boolean)"/> will then return the default members for further processing.
            <see cref="M:YAXLib.DefaultTypeInspector.GetTypeName(System.Type,YAXLib.Options.SerializerOptions)"/> lets you define the type names.
            customization.
            </summary>
        </member>
        <member name="T:YAXLib.Options.YAXAttributeName">
            <summary>
            Definitions for special attribute names.
            </summary>
        </member>
        <member name="P:YAXLib.Options.YAXAttributeName.Dimensions">
            <summary>
            The attribute name used to de-serialize meta-data for multi-dimensional arrays.
            </summary>
        </member>
        <member name="P:YAXLib.Options.YAXAttributeName.RealType">
            <summary>
            The attribute name used to de-serialize meta-data for real types of objects serialized through
            a reference to their base class or interface.
            </summary>
        </member>
        <member name="T:YAXLib.Options.YAXNameSpace">
            <summary>
            XML Namespace definitions for the <see cref="T:YAXLib.YAXSerializer" />.
            </summary>
        </member>
        <member name="P:YAXLib.Options.YAXNameSpace.Uri">
            <summary>
            The URI address which holds the xmlns:yaxlib definition.
            </summary>
        </member>
        <member name="P:YAXLib.Options.YAXNameSpace.Prefix">
            <summary>
            The prefix used for the xml namespace.
            </summary>
        </member>
        <member name="P:YAXLib.Pooling.ObjectPools.IObjectPool`1.PoolItems">
            <summary>
            Gets a <see cref="T:System.Collections.Generic.IReadOnlyList`1" /> of the unused items in the object pool.
            </summary>
        </member>
        <member name="M:YAXLib.Pooling.ObjectPools.IObjectPool`1.Get">
            <summary>
            Get an object from the pool.
            </summary>
            <returns>
            An initialized object from the pool.
            </returns>
        </member>
        <member name="M:YAXLib.Pooling.ObjectPools.IObjectPool`1.Get(`0@)">
            <summary>
            Get a new <see cref="T:YAXLib.Pooling.ObjectPools.PooledObject`1" /> which can be used to
            return the instance back to the pool when the <see cref="T:YAXLib.Pooling.ObjectPools.PooledObject`1" /> is disposed.
            </summary>
            <param name="instance">Output new typed object.</param>
            <returns>
            A <see cref="T:YAXLib.Pooling.ObjectPools.PooledObject`1" />
            </returns>
        </member>
        <member name="M:YAXLib.Pooling.ObjectPools.IObjectPool`1.Return(`0)">
            <summary>
            Returns an object to the pool.
            </summary>
            <param name="element">Object to return to the pool.</param>
        </member>
        <member name="M:YAXLib.Pooling.ObjectPools.IObjectPool`1.Clear">
            <summary>
            Releases all pooled objects so they can be garbage collected.
            Pooled items will be destroyed before they will be released to garbage collection.
            </summary>
        </member>
        <member name="P:YAXLib.Pooling.ObjectPools.IPoolCounters.CountAll">
            <summary>
            The total number of active and inactive objects.
            </summary>
        </member>
        <member name="P:YAXLib.Pooling.ObjectPools.IPoolCounters.CountActive">
            <summary>
            Number of objects that have been created by the pool but are currently in use and have not yet been returned.
            </summary>
        </member>
        <member name="P:YAXLib.Pooling.ObjectPools.IPoolCounters.CountInactive">
            <summary>
            Number of objects that are currently available in the pool.
            </summary>
        </member>
        <member name="T:YAXLib.Pooling.ObjectPools.ObjectPool`1">
            <summary>
            The abstract base class for object pool implementations.
            </summary>
            <typeparam name="T"><see langword="type" /> of the object pool elements.</typeparam>
        </member>
        <member name="M:YAXLib.Pooling.ObjectPools.ObjectPool`1.#ctor(YAXLib.Pooling.ObjectPools.PoolPolicy{`0})">
            <summary>
            Creates a new object pool.
            </summary>
        </member>
        <member name="P:YAXLib.Pooling.ObjectPools.ObjectPool`1.PoolPolicy">
            <summary>
            The configuration of how an <see cref="T:YAXLib.Pooling.ObjectPools.IObjectPool`1" /> works.
            </summary>
        </member>
        <member name="P:YAXLib.Pooling.ObjectPools.ObjectPool`1.CountAll">
            <summary>
            The total number of active and inactive objects.
            </summary>
        </member>
        <member name="P:YAXLib.Pooling.ObjectPools.ObjectPool`1.PoolItems">
            <summary>
            Gets a <see cref="T:System.Collections.Generic.IReadOnlyList`1" /> of the unused items in the object pool.
            </summary>
        </member>
        <member name="P:YAXLib.Pooling.ObjectPools.ObjectPool`1.CountActive">
            <summary>
            Number of objects that have been created by the pool but are currently in use and have not yet been returned.
            </summary>
        </member>
        <member name="P:YAXLib.Pooling.ObjectPools.ObjectPool`1.CountInactive">
            <summary>
            Number of objects that are currently available in the pool.
            </summary>
        </member>
        <member name="M:YAXLib.Pooling.ObjectPools.ObjectPool`1.Get">
            <summary>
            Get an object from the pool.
            </summary>
            <returns>
            An initialized object from the pool.
            </returns>
        </member>
        <member name="M:YAXLib.Pooling.ObjectPools.ObjectPool`1.Get(`0@)">
            <summary>
            Get a new <see cref="T:YAXLib.Pooling.ObjectPools.PooledObject`1" /> which can be used to
            return the instance back to the pool when the <see cref="T:YAXLib.Pooling.ObjectPools.PooledObject`1" /> is disposed.
            </summary>
            <param name="instance">Output new typed object.</param>
            <returns>
            A <see cref="T:YAXLib.Pooling.ObjectPools.PooledObject`1" />
            </returns>
        </member>
        <member name="M:YAXLib.Pooling.ObjectPools.ObjectPool`1.Return(`0)">
            <summary>
            Returns an object to the pool.
            </summary>
            <param name="element">Object to return to the pool.</param>
        </member>
        <member name="M:YAXLib.Pooling.ObjectPools.ObjectPool`1.Clear">
            <summary>
            Releases all pooled objects so they can be garbage collected.
            Pooled items will be destroyed before they will be released to garbage collection.
            <see cref="P:YAXLib.Pooling.ObjectPools.ObjectPool`1.CountAll" />, <see cref="P:YAXLib.Pooling.ObjectPools.ObjectPool`1.CountActive" /> and <see cref="P:YAXLib.Pooling.ObjectPools.ObjectPool`1.CountInactive" /> are set to zero.
            </summary>
            <remarks>
            The method should be called from <see cref="M:YAXLib.Pooling.ObjectPools.ObjectPool`1.Dispose(System.Boolean)" />.
            </remarks>
        </member>
        <member name="M:YAXLib.Pooling.ObjectPools.ObjectPool`1.Dispose(System.Boolean)">
            <summary>
            Disposes the resources by calling the <see cref="M:YAXLib.Pooling.ObjectPools.ObjectPool`1.Clear" /> method.
            </summary>
            <param name="disposing"></param>
        </member>
        <member name="M:YAXLib.Pooling.ObjectPools.ObjectPool`1.Dispose">
            <inheritdoc />
        </member>
        <member name="T:YAXLib.Pooling.ObjectPools.ObjectPoolConcurrent`1">
            <summary>
            Generic, thread-safe object pool implementation.
            </summary>
            <typeparam name="T"><see langword="type" /> of the object pool elements.</typeparam>
        </member>
        <member name="M:YAXLib.Pooling.ObjectPools.ObjectPoolConcurrent`1.#ctor(YAXLib.Pooling.ObjectPools.PoolPolicy{`0})">
            <inheritdoc />
        </member>
        <member name="P:YAXLib.Pooling.ObjectPools.ObjectPoolConcurrent`1.CountAll">
            <inheritdoc />
        </member>
        <member name="P:YAXLib.Pooling.ObjectPools.ObjectPoolConcurrent`1.PoolItems">
            <inheritdoc />
        </member>
        <member name="P:YAXLib.Pooling.ObjectPools.ObjectPoolConcurrent`1.CountInactive">
            <inheritdoc />
        </member>
        <member name="M:YAXLib.Pooling.ObjectPools.ObjectPoolConcurrent`1.Get">
            <inheritdoc />
        </member>
        <member name="M:YAXLib.Pooling.ObjectPools.ObjectPoolConcurrent`1.Return(`0)">
            <inheritdoc />
        </member>
        <member name="M:YAXLib.Pooling.ObjectPools.ObjectPoolConcurrent`1.Clear">
            <inheritdoc />
        </member>
        <member name="T:YAXLib.Pooling.ObjectPools.PooledObject`1">
            <summary>
            A <see cref="T:YAXLib.Pooling.ObjectPools.PooledObject`1" /> wraps a reference to an instance that will be returned
            to the pool when the <see cref="T:YAXLib.Pooling.ObjectPools.PooledObject`1" /> is disposed.
            The purpose is to automate the return of references so that they do not need to be returned manually.
            <example>
                <para>A <see cref="T:YAXLib.Pooling.ObjectPools.PooledObject`1" /> can be used like so:</para>
                <code>
            MyClass myInstance;
            using(myPool.Get(out myInstance)) // When leaving the scope myInstance will be returned to the pool.
            {
                // Do something with myInstance
            }
            </code>
            </example>
            </summary>
        </member>
        <member name="T:YAXLib.Pooling.ObjectPools.PoolPolicy`1">
            <summary>
            Defines the configuration of how an <see cref="T:YAXLib.Pooling.ObjectPools.IObjectPool`1" /> works.
            </summary>
            <typeparam name="T">The type of item being pooled.</typeparam>
        </member>
        <member name="P:YAXLib.Pooling.ObjectPools.PoolPolicy`1.MaximumPoolSize">
            <summary>
            Determines the maximum number of items allowed in the pool, which must not be zero.
            </summary>
            <remarks>
                <para>
                This restricts the number of instances stored in the pool at any given time.
                It does not represent the maximum number of items that may be generated or exist in memory at any given time.
                If the pool is empty and a new item is requested, a new instance will be created,
                even if pool was previously full and all it's instances have been taken already.
                </para>
            </remarks>
            <exception cref="T:System.ArgumentException"></exception>
        </member>
        <member name="P:YAXLib.Pooling.ObjectPools.PoolPolicy`1.InitialPoolSize">
            <summary>
            The initial capacity the item store will be created with. May not be used in <see cref="T:YAXLib.Pooling.ObjectPools.IObjectPool`1" />
            implementations.
            Default is 10.
            </summary>
        </member>
        <member name="P:YAXLib.Pooling.ObjectPools.PoolPolicy`1.FunctionOnCreate">
            <summary>
            A function that returns a new item for the pool. Used when the pool is empty and a new item is requested.
            </summary>
            <remarks>
                <para>
                Should return a new, clean item, ready for use by the caller. Takes a single argument being a reference to
                the pool that was asked for the object, useful if you're creating <see cref="T:YAXLib.Pooling.ObjectPools.PooledObject`1" /> instances.
                </para>
                <para>
                May not be <see langword="null" />. If <see langword="null" /> when provided to an
                <see cref="T:YAXLib.Pooling.ObjectPools.IObjectPool`1" /> instance, an <see cref="T:System.ArgumentNullException" /> will be thrown.
                </para>
            </remarks>
            <exception cref="T:System.ArgumentNullException"></exception>
        </member>
        <member name="P:YAXLib.Pooling.ObjectPools.PoolPolicy`1.ActionOnDestroy">
            <summary>
            Called when the element cannot be returned to the pool because this would exceed the maximal pool size.
            </summary>
        </member>
        <member name="P:YAXLib.Pooling.ObjectPools.PoolPolicy`1.ActionOnGet">
            <summary>
            Called when an item is being taken from the pool.
            Should return an initialized, clean item, ready for use by the caller.
            </summary>
        </member>
        <member name="P:YAXLib.Pooling.ObjectPools.PoolPolicy`1.ActionOnReturn">
            <summary>
            Called when an item is being returned to the pool.
            This could be used to clean up or disable the instance.
            </summary>
        </member>
        <member name="T:YAXLib.Pooling.PoolingException">
            <summary>
            Represents an <i>Exception</i> thrown by the pooling subsystem.
            </summary>
        </member>
        <member name="M:YAXLib.Pooling.PoolingException.#ctor(System.String,System.Type)">
            <summary>
            Creates a instance of a <see cref="T:YAXLib.Pooling.PoolingException" />.
            </summary>
            <param name="message"></param>
            <param name="poolType"></param>
        </member>
        <member name="M:YAXLib.Pooling.PoolingException.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <inheritdoc />
        </member>
        <member name="P:YAXLib.Pooling.PoolingException.PoolType">
            <summary>
            Gets the type of pool, which threw the exception.
            </summary>
        </member>
        <member name="T:YAXLib.Pooling.PoolRegistry">
            <summary>
            Registry for all object pools.
            </summary>
        </member>
        <member name="M:YAXLib.Pooling.PoolRegistry.GetOrAdd``1(System.Func{``0})">
            <summary>
            Adds a pool to the registry.
            </summary>
            <typeparam name="T"></typeparam>
            <param name="poolFunc"></param>
            <returns>The instance of pool which was added.</returns>
        </member>
        <member name="M:YAXLib.Pooling.PoolRegistry.Remove``1(``0)">
            <summary>
            Removes a pool from the registry.
            </summary>
            <typeparam name="T"></typeparam>
            <param name="pool"></param>
        </member>
        <member name="M:YAXLib.Pooling.PoolRegistry.Get``1">
            <summary>
            Gets the pool of type <typeparamref name="T" /> from the registry, or <see langword="null" /> if not found.
            </summary>
            <typeparam name="T"></typeparam>
            <returns>The pool of type <typeparamref name="T" /> from the registry, or <see langword="null" /> if not found.</returns>
        </member>
        <member name="T:YAXLib.Pooling.SpecializedPools.CollectionPool`2">
            <summary>
            Generic object pool implementation for <see cref="T:System.Collections.Generic.ICollection`1" />s.
            </summary>
            <typeparam name="TCollection"></typeparam>
            name=""/>
            <typeparam name="TItem"></typeparam>
            name=""/>
        </member>
        <member name="M:YAXLib.Pooling.SpecializedPools.CollectionPool`2.#ctor">
            <summary>
            CTOR.
            </summary>
            <remarks>
            <see cref="F:YAXLib.Pooling.SpecializedPools.SpecializedPoolBase`1.Policy" /> must be set before initializing the pool
            </remarks>
        </member>
        <member name="P:YAXLib.Pooling.SpecializedPools.CollectionPool`2.Instance">
            <summary>
            Gets a singleton instance of the pool.
            </summary>
        </member>
        <member name="T:YAXLib.Pooling.SpecializedPools.DictionaryPool`2">
            <summary>
            Generic object pool implementation for <see cref="T:System.Collections.Generic.IDictionary`2" />s.
            </summary>
        </member>
        <member name="M:YAXLib.Pooling.SpecializedPools.DictionaryPool`2.#ctor">
            <summary>
            CTOR.
            </summary>
            <remarks>
            <see cref="F:YAXLib.Pooling.SpecializedPools.SpecializedPoolBase`1.Policy" /> must be set before initializing the pool
            </remarks>
        </member>
        <member name="P:YAXLib.Pooling.SpecializedPools.DictionaryPool`2.Instance">
            <summary>
            Gets a singleton instance of the pool.
            </summary>
        </member>
        <member name="T:YAXLib.Pooling.SpecializedPools.HashSetPool`1">
            <summary>
            Generic object pool implementation for <see cref="T:System.Collections.Generic.HashSet`1" />s.
            </summary>
        </member>
        <member name="M:YAXLib.Pooling.SpecializedPools.HashSetPool`1.#ctor">
            <summary>
            CTOR.
            </summary>
            <remarks>
            <see cref="F:YAXLib.Pooling.SpecializedPools.SpecializedPoolBase`1.Policy" /> must be set before initializing the pool
            </remarks>
        </member>
        <member name="P:YAXLib.Pooling.SpecializedPools.HashSetPool`1.Instance">
            <summary>
            Gets a singleton instance of the pool.
            </summary>
        </member>
        <member name="T:YAXLib.Pooling.SpecializedPools.ListPool`1">
            <summary>
            Generic object pool implementation for <see cref="T:System.Collections.Generic.IList`1" />s.
            </summary>
        </member>
        <member name="M:YAXLib.Pooling.SpecializedPools.ListPool`1.#ctor">
            <summary>
            CTOR.
            </summary>
            <remarks>
            <see cref="F:YAXLib.Pooling.SpecializedPools.SpecializedPoolBase`1.Policy" /> must be set before initializing the pool
            </remarks>
        </member>
        <member name="P:YAXLib.Pooling.SpecializedPools.ListPool`1.Instance">
            <summary>
            Gets a singleton instance of the pool.
            </summary>
        </member>
        <member name="T:YAXLib.Pooling.SpecializedPools.SpecializedPoolBase`1">
            <summary>
            The abstract base class for specialized pools.
            </summary>
            <typeparam name="T">The <see langword="type" /> of the smart pool.</typeparam>
        </member>
        <member name="P:YAXLib.Pooling.SpecializedPools.SpecializedPoolBase`1.Pool">
            <summary>
            The static <see cref="T:YAXLib.Pooling.ObjectPools.ObjectPool`1" /> instance.
            </summary>
        </member>
        <member name="F:YAXLib.Pooling.SpecializedPools.SpecializedPoolBase`1.Policy">
            <summary>
            The policy for the pool. Policy must be defined before initializing the pool.
            </summary>
        </member>
        <member name="M:YAXLib.Pooling.SpecializedPools.SpecializedPoolBase`1.Reset">
            <summary>
            Disposes the current instance of the <see cref="T:YAXLib.Pooling.ObjectPools.ObjectPool`1" /> and
            creates a new one, applying the current <see cref="T:YAXLib.Pooling.ObjectPools.PoolPolicy`1" />.
            </summary>
        </member>
        <member name="M:YAXLib.Pooling.SpecializedPools.SpecializedPoolBase`1.Get">
            <summary>
            Gets a <see typeparamref="T" /> instance from the object pool.
            </summary>
            <returns>A <see typeparamref="T" /> instance from the object pool.</returns>
        </member>
        <member name="M:YAXLib.Pooling.SpecializedPools.SpecializedPoolBase`1.Get(`0@)">
            <summary>
            Get a new <see cref="T:YAXLib.Pooling.ObjectPools.PooledObject`1" /> which can be used to
            return the instance back to the pool when the <see cref="T:YAXLib.Pooling.ObjectPools.PooledObject`1" /> is disposed.
            </summary>
            <param name="instance">Output new typed object.</param>
            <returns>
            A <see cref="T:YAXLib.Pooling.ObjectPools.PooledObject`1" />
            </returns>
        </member>
        <member name="M:YAXLib.Pooling.SpecializedPools.SpecializedPoolBase`1.Return(`0)">
            <summary>
            The default method to return an instance to the pool.
            The method can be overriden in a derived class.
            </summary>
            <param name="toReturn"></param>
        </member>
        <member name="M:YAXLib.Pooling.SpecializedPools.SpecializedPoolBase`1.Clear">
            <summary>
            Releases all pooled objects so they can be garbage collected.
            Pooled items will be destroyed before they will be released to garbage collection.
            </summary>
        </member>
        <member name="M:YAXLib.Pooling.SpecializedPools.SpecializedPoolBase`1.Dispose(System.Boolean)">
            <summary>
            Disposes the resources by calling the <see cref="M:YAXLib.Pooling.SpecializedPools.SpecializedPoolBase`1.Clear" /> method.
            </summary>
            <param name="disposing"></param>
        </member>
        <member name="M:YAXLib.Pooling.SpecializedPools.SpecializedPoolBase`1.Dispose">
            <inheritdoc />
        </member>
        <member name="T:YAXLib.Pooling.SpecializedPools.StringBuilderPool">
            <summary>
            The object pool for <see cref="T:System.Text.StringBuilder" />.
            </summary>
        </member>
        <member name="M:YAXLib.Pooling.SpecializedPools.StringBuilderPool.#ctor">
            <summary>
            CTOR.
            </summary>
            <remarks>
            <see cref="F:YAXLib.Pooling.SpecializedPools.SpecializedPoolBase`1.Policy" /> must be set before initializing the pool
            </remarks>
        </member>
        <member name="P:YAXLib.Pooling.SpecializedPools.StringBuilderPool.DefaultStringBuilderCapacity">
            <summary>
            Gets or sets the <see cref="P:System.Text.StringBuilder.Capacity" />, that is used
            when creating new instances, or when returning an instance to the pool.
            <para>The default capacity is 1024.</para>
            </summary>
        </member>
        <member name="P:YAXLib.Pooling.SpecializedPools.StringBuilderPool.Instance">
            <summary>
            Gets a singleton instance of the pool.
            </summary>
        </member>
        <member name="T:YAXLib.Pooling.YAXLibPools.PoolBase`1">
            <summary>
            The abstract base class for YAXLib pools.
            Used to identify pools belonging to YAXLib.
            </summary>
            <typeparam name="T">The <see langword="type" /> of the YAXLib pool.</typeparam>
        </member>
        <member name="T:YAXLib.Pooling.YAXLibPools.SerializerPool">
            <summary>
            The object pool for <see cref="T:YAXLib.YAXSerializer" />.
            </summary>
        </member>
        <member name="M:YAXLib.Pooling.YAXLibPools.SerializerPool.#ctor">
            <summary>
            CTOR.
            </summary>
            <remarks>
            <see cref="F:YAXLib.Pooling.SpecializedPools.SpecializedPoolBase`1.Policy" /> must be set before initializing the pool
            </remarks>
        </member>
        <member name="P:YAXLib.Pooling.YAXLibPools.SerializerPool.Instance">
            <summary>
            Gets a singleton instance of the pool.
            </summary>
        </member>
        <member name="T:YAXLib.ReflectionUtils">
            <summary>
            A utility class for reflection related stuff
            </summary>
        </member>
        <member name="M:YAXLib.ReflectionUtils.IsBasicType(System.Type)">
            <summary>
            Determines whether the specified type is basic type. A basic type is one that can be wholly expressed
            as an XML attribute. All primitive data types and type <c>string</c> and <c>DataTime</c> are basic.
            </summary>
            <param name="t">The type to check.</param>
            <returns>
                <value><c>true</c> if the specified type is a basic type; otherwise, <c>false</c>.</value>
            </returns>
        </member>
        <member name="M:YAXLib.ReflectionUtils.IsArray(System.Type,System.Type@)">
            <summary>
            Determines whether the specified type is array.
            </summary>
            <param name="type">The type to check</param>
            <param name="elementType">Type of the containing element.</param>
            <returns>
                <value><c>true</c> if the specified type is array; otherwise, <c>false</c>.</value>
            </returns>
        </member>
        <member name="M:YAXLib.ReflectionUtils.IsArray(System.Type)">
            <summary>
            Determines whether the specified type is array.
            </summary>
            <param name="type">The type to check.</param>
            <returns>
            <c>true</c> if the specified type is array; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="M:YAXLib.ReflectionUtils.GetArrayDimensions(System.Object)">
            <summary>
            Gets the array dimensions.
            </summary>
            <param name="ar">The array to return its dimensions.</param>
            <returns>the specified array's dimensions</returns>
        </member>
        <member name="M:YAXLib.ReflectionUtils.GetTypeFriendlyName(System.Type)">
            <summary>
            Gets the friendly name for the type. Recommended for generic types.
            </summary>
            <param name="type">The type to get its friendly name</param>
            <returns>The friendly name for the type</returns>
        </member>
        <member name="M:YAXLib.ReflectionUtils.TypeContainsGenericParameters(System.Type)">
            <summary>
            Determines whether the type specified contains generic parameters or not.
            </summary>
            <param name="type">The type to check.</param>
            <returns>
                <value><c>true</c> if the type contains generic parameters; otherwise,<c>false</c>.</value>
            </returns>
        </member>
        <member name="M:YAXLib.ReflectionUtils.IsCollectionType(System.Type)">
            <summary>
            Determines whether the specified type is a collection type, i.e., it implements IEnumerable.
            Although System.String is derived from IEnumerable, it is considered as an exception.
            </summary>
            <param name="type">The type to check.</param>
            <returns>
                <value><c>true</c> if the specified type is a collection type; otherwise, <c>false</c>.</value>
            </returns>
        </member>
        <member name="M:YAXLib.ReflectionUtils.IsIEnumerable(System.Type)">
            <summary>
            Determines whether the specified type has implemented or is an <c>IEnumerable</c> or <c>IEnumerable&lt;&gt;</c>
            </summary>
            <param name="type">The type to check.</param>
            <returns>
                <value><c>true</c> if the specified type is enumerable; otherwise, <c>false</c>.</value>
            </returns>
        </member>
        <member name="M:YAXLib.ReflectionUtils.IsIEnumerable(System.Type,System.Type@)">
            <summary>
            Determines whether the specified type has implemented or is an <c>IEnumerable</c> or <c>IEnumerable&lt;&gt;</c> .
            </summary>
            <param name="type">The type to check.</param>
            <param name="seqType">Type of the sequence items.</param>
            <returns>
                <value><c>true</c> if the specified type is enumerable; otherwise, <c>false</c>.</value>
            </returns>
        </member>
        <member name="M:YAXLib.ReflectionUtils.GetCollectionItemType(System.Type)">
            <summary>
            Gets the type of the items of a collection type.
            </summary>
            <param name="type">The type of the collection.</param>
            <returns>The type of the items of a collection type.</returns>
        </member>
        <member name="M:YAXLib.ReflectionUtils.IsIList(System.Type)">
            <summary>
            Determines whether the specified type has implemented <c>IList</c>.
            </summary>
            <param name="type">The type to check.</param>
            <returns>
                <value><c>true</c> if the specified type has implemented <c>IList</c>; otherwise, <c>false</c>.</value>
            </returns>
        </member>
        <member name="M:YAXLib.ReflectionUtils.IsICollection(System.Type,System.Type@)">
            <summary>
            Determines whether the specified type has implemented the <c>ICollection</c> interface.
            </summary>
            <param name="type">The type to check.</param>
            <param name="itemType">Type of the member items.</param>
            <returns>
                <value><c>true</c> if the specified type has implemented the <c>ICollection</c> interface; otherwise, <c>false</c>.</value>
            </returns>
        </member>
        <member name="M:YAXLib.ReflectionUtils.IsIDictionary(System.Type,System.Type@,System.Type@)">
            <summary>
            Determines whether the specified type is a generic dictionary.
            </summary>
            <param name="type">The type to check.</param>
            <param name="keyType">Type of the key.</param>
            <param name="valueType">Type of the value.</param>
            <returns>
                <value><c>true</c> if the specified type has implemented the IDictionary interface; otherwise, <c>false</c>.</value>
            </returns>
        </member>
        <member name="M:YAXLib.ReflectionUtils.IsIDictionary(System.Type)">
            <summary>
            Determines whether the specified type is a generic dictionary.
            </summary>
            <param name="type">The type to check.</param>
            <returns>
                <value><c>true</c> if the specified type is dictionary; otherwise, <c>false</c>.</value>
            </returns>
        </member>
        <member name="M:YAXLib.ReflectionUtils.IsNonGenericIDictionary(System.Type)">
            <summary>
            Determines whether the specified type is a non generic IDictionary, e.g., a Hashtable.
            </summary>
            <param name="type">The type to check.</param>
            <returns>
            <c>true</c> if the specified type is a non generic IDictionary; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="M:YAXLib.ReflectionUtils.EqualsOrIsNullableOf(System.Type,System.Type)">
            <summary>
            Determines whether the specified type is equal to this type,
            or is a nullable of this type, or this type is a nullable of
            the other type.
            </summary>
            <param name="self"></param>
            <param name="other"></param>
            <returns></returns>
        </member>
        <member name="M:YAXLib.ReflectionUtils.IsTypeEqualOrInheritedFromType(System.Type,System.Type)">
            <summary>
            Determines whether the specified type is equal or inherited from another specified type.
            </summary>
            <param name="type">The type to check.</param>
            <param name="baseType">
            Another type that the specified type is checked whether it is equal or
            has been driven from.
            </param>
            <returns>
            <c>true</c> if the specified type is equal or inherited from another specified type; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="M:YAXLib.ReflectionUtils.ConvertBasicType(System.Object,System.Type,System.Globalization.CultureInfo)">
            <summary>
            Converts the specified object from a basic type to another type as specified.
            It is meant by basic types, primitive data types, strings, and enums.
            </summary>
            <param name="value">The object to be converted.</param>
            <param name="dstType">the destination type of conversion.</param>
            <param name="culture">The <see cref="T:System.Globalization.CultureInfo" /> to use for culture-specific value formats.</param>
            <returns>the converted object</returns>
        </member>
        <member name="M:YAXLib.ReflectionUtils.IsNullable(System.Type)">
            <summary>
            Determines whether the specified type is nullable.
            </summary>
            <param name="type">The type to check.</param>
            <returns>
            <c>true</c> if the specified type is nullable; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="M:YAXLib.ReflectionUtils.IsNullable(System.Type,System.Type@)">
            <summary>
            Determines whether the specified type is nullable.
            </summary>
            <param name="type">The type to check.</param>
            <param name="valueType">The value type of the corresponding nullable type.</param>
            <returns>
            <c>true</c> if the specified type is nullable; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="M:YAXLib.ReflectionUtils.GetDefaultValue(System.Type)">
            <summary>
            Gets the default value for the specified type.
            </summary>
            <param name="type">The <see cref="T:System.Type"/> for which to retrieve the default value.</param>
            <returns>
            The default value for the specified type. If the type is a reference type or a nullable value type, returns <c>null</c>.
            </returns>
        </member>
        <member name="M:YAXLib.ReflectionUtils.IsIFormattable(System.Type)">
            <summary>
            Determines whether the specified type implements <c>IFormattable</c>
            </summary>
            <param name="type">The type to check.</param>
            <returns>
            <c>true</c> if the specified type implements <c>IFormattable</c>; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="M:YAXLib.ReflectionUtils.IsStringConvertibleIFormattable(System.Type)">
            <summary>
            Determines whether the type provides the functionality
            to format the value of an object into a string representation.
            </summary>
            <param name="type">The type to check.</param>
            <returns>
                <value><c>true</c> if the specified type implements the <c>IFormattable</c> interface; otherwise, <c>false</c>.</value>
            </returns>
        </member>
        <member name="M:YAXLib.ReflectionUtils.HasOneReadWriteProperty(System.Type)">
            <summary>
            Checks to see if the specified type has readable and writable properties.
            </summary>
            <param name="type">The type to check for.</param>
            <returns>
                <value><c>true</c> if the specified type has readable and writable properties; otherwise, <c>false</c>.</value>
            </returns>
        </member>
        <member name="M:YAXLib.ReflectionUtils.TryFormatObject(System.Object,System.String)">
            <summary>
            Tries to format the specified object using the format string provided.
            If the formatting operation is not applicable, the source object is returned intact.
            Note: The type of the returned object will be 'System.String' if formatting succeeds.
            </summary>
            <param name="src">The source object.</param>
            <param name="format">The format string.</param>
            <returns><code>System.String</code> if the format is successful; otherwise, the original object</returns>
        </member>
        <member name="M:YAXLib.ReflectionUtils.GetTypeByName(System.String)">
            <summary>
            Searches all loaded assemblies to find a type with a special name.
            </summary>
            <remarks>
            Types from System.Private.CoreLib (NETSTANDARD, NET5.0) the corresponding type from mscorlib (NETFRAMEWORK)
            will be returned and vice versa, depending on the framework the executing assembly is compiled for.
            </remarks>
            <param name="name">The <see cref="P:System.Type.AssemblyQualifiedName" /> of the type to find.</param>
            <returns><see cref="T:System.Type" /> found using the specified name</returns>
        </member>
        <member name="M:YAXLib.ReflectionUtils.IsPublicProperty(System.Reflection.PropertyInfo)">
            <summary>
            Determines whether the specified property is public.
            </summary>
            <param name="pi">The property.</param>
            <returns>
            <c>true</c> if the specified property is public; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="M:YAXLib.ReflectionUtils.IsPartOfNetFx(System.Reflection.MemberInfo)">
            <summary>
            Test whether the <see cref="T:System.Reflection.MemberInfo" /> parameter is part of a .NET assembly.
            </summary>
            <remarks>
            Might require modifications when supporting future versions of .NET.
            </remarks>
            <param name="memberInfo"></param>
            <returns>
            Returns <see langword="true" />, if the <see cref="T:System.Reflection.MemberInfo" /> parameter is part of a .NET assembly, else
            <see langword="false" />.
            </returns>
        </member>
        <member name="M:YAXLib.ReflectionUtils.GetFieldValue(System.Object,System.String,System.Boolean)">
            <summary>
            Gets the value for a public or non-public instance field.
            Including private fields in base types is optional, and enabled by default.
            </summary>
            <param name="target"></param>
            <param name="fieldName"></param>
            <param name="includePrivateBaseTypeFields"></param>
        </member>
        <member name="M:YAXLib.ReflectionUtils.SetFieldValue(System.Object,System.String,System.Object,System.Boolean)">
            <summary>
            Sets the value for a public or non-public instance field..
            Including private fields in base types is optional, and enabled by default.
            </summary>
            <param name="target"></param>
            <param name="fieldName"></param>
            <param name="value"></param>
            <param name="includePrivateBaseTypeFields"></param>
        </member>
        <member name="M:YAXLib.ReflectionUtils.GetPropertyValue(System.Object,System.String,System.Boolean)">
            <summary>
            Gets the value for a public or non-public instance property.
            Including private properties in base types is optional, and enabled by default.
            </summary>
        </member>
        <member name="M:YAXLib.ReflectionUtils.SetPropertyValue(System.Object,System.String,System.Object,System.Boolean)">
            <summary>
            Sets the value for a public or non-public instance property.
            Including private properties in base types is optional, and enabled by default.
            </summary>
        </member>
        <member name="F:YAXLib.Serialization._baseElement">
            <summary>
            A reference to the base xml element used during serialization.
            Will always be set by <see cref="M:YAXLib.Serialization.SetBaseElement(System.Xml.Linq.XName)" /> when serialization starts.
            </summary>
        </member>
        <member name="F:YAXLib.Serialization._mainDocument">
            <summary>
            XML document object which will hold the resulting serialization
            </summary>
        </member>
        <member name="M:YAXLib.Serialization.Initialize">
            <summary>
            This instance will be (re-) initialized it a way
            that it has the same virgin state like an instance that
            was created with one of the CTORs.
            </summary>
        </member>
        <member name="M:YAXLib.Serialization.SerializeXDocument(System.Object)">
            <summary>
            Serializes the object into an <c>XDocument</c> object.
            </summary>
            <param name="obj">The object to serialize.</param>
            <returns></returns>
        </member>
        <member name="M:YAXLib.Serialization.SerializeBase(System.Object,System.Xml.Linq.XName)">
            <summary>
            The base method that performs the whole job of serialization.
            Other serialization methods call this method to have their job done.
            </summary>
            <param name="obj">The object to be serialized</param>
            <param name="className">Name of the element that contains the serialized object.</param>
            <returns>
            an instance of <c>XElement</c> which contains the result of
            serialization of the specified object
            </returns>
        </member>
        <member name="M:YAXLib.Serialization.SerializeBase(System.Object)">
            <summary>
            One of the base methods that perform the whole job of serialization.
            </summary>
            <param name="obj">The object to be serialized</param>
            <returns>
            an instance of <c>XElement</c> which contains the result of
            serialization of the specified object
            </returns>
        </member>
        <member name="M:YAXLib.Serialization.RemoveElementIfNecessary(System.Boolean)">
            <summary>
            It checks, if all the members of an element have been serialized
            somewhere else, leaving the containing member empty.
            <para>
            In this case, remove that element by itself, <b>unless</b> the element is empty, because the
            corresponding object did not have any fields to serialize (e.g., DBNull, Random).
            Then keep the element.
            </para>
            </summary>
            <param name="isAnythingFoundToSerialize">
            A flag that indicates whether the object has any fields to be serialized.
            If it is <see langword="false" />, then we will not remove
            the containing element from the resulting XML.
            </param>
        </member>
        <member name="M:YAXLib.Serialization.IsNullButDoNotSerializeNull(YAXLib.MemberWrapper,System.Object)">
            <summary>
            Checks whether the <paramref name="elementValue" /> is <see langword="null" />,
            and <see langword="null" /> shall not be serialized.
            </summary>
            <param name="elementValue"></param>
            <param name="member"></param>
            <returns></returns>
        </member>
        <member name="M:YAXLib.Serialization.IsDefaultButDoNotSerializeDefault(YAXLib.MemberWrapper,System.Object)">
            <summary>
            Checks whether the <paramref name="elementValue" /> is <see langword="default" />,
            and <see langword="default" /> shall not be serialized.
            </summary>
            <param name="elementValue"></param>
            <param name="member"></param>
            <returns></returns>
        </member>
        <member name="M:YAXLib.Serialization.SetBaseElement(System.Xml.Linq.XName)">
            <summary>
            Creates a new <see cref="T:System.Xml.Linq.XElement" /> and adds it to the base element.
            </summary>
            <param name="className"></param>
        </member>
        <member name="M:YAXLib.Serialization.SetBaseElement(System.Xml.Linq.XElement)">
            <summary>
            Sets the base XML element. This method is used when an <see cref="T:YAXLib.YAXSerializer" />
            instantiates another <see cref="T:YAXLib.YAXSerializer" /> to serialize nested objects.
            Through this method the child objects have access to the already serialized elements of
            their parent.
            </summary>
            <param name="baseElement">The base XML element.</param>
        </member>
        <member name="M:YAXLib.Serialization.AddElement(System.Xml.Linq.XElement,System.Object,YAXLib.MemberWrapper,System.Boolean)">
            <summary>
            Adds a 'regular' <see cref="T:System.Xml.Linq.XElement" /> to the parent element.
            </summary>
            <param name="parElem"></param>
            <param name="elementValue"></param>
            <param name="member"></param>
            <param name="areOfSameType"></param>
        </member>
        <member name="M:YAXLib.Serialization.GetParentElement(System.String)">
            <summary>
            Gets the parent <see cref="T:System.Xml.Linq.XElement" />.
            </summary>
            <param name="serializationLocation"></param>
            <returns></returns>
            <exception cref="T:YAXLib.Exceptions.YAXBadLocationException"></exception>
        </member>
        <member name="M:YAXLib.Serialization.CreateElementWithNamespace(YAXLib.UdtWrapper,System.Xml.Linq.XName)">
            <summary>
            Adds the namespace applying to the object type specified in <paramref name="wrapper" />
            to the <paramref name="className" />
            </summary>
            <param name="wrapper">The wrapper around the object who's namespace should be added</param>
            <param name="className">The root node of the document to which the namespace should be written</param>
        </member>
        <member name="M:YAXLib.Serialization.MakeElement(System.Xml.Linq.XElement,YAXLib.MemberWrapper,System.Object,System.Boolean@,System.Boolean@)">
            <summary>
            Makes the element corresponding to the member specified.
            </summary>
            <param name="insertionLocation">The insertion location.</param>
            <param name="member">The member to serialize.</param>
            <param name="elementValue">The element value.</param>
            <param name="moveDescOnly">
            if set to <see langword="true" /> specifies that only the descendants of the resulting element should be
            added to the parent.
            </param>
            <param name="alreadyAdded">
            If set to <see langword="true" /> specifies the element returned is
            already added to the parent element and should not be added once more.
            </param>
            <returns></returns>
        </member>
        <member name="M:YAXLib.Serialization.MakeDictionaryElement(System.Xml.Linq.XElement,System.Xml.Linq.XName,System.Object,YAXLib.Attributes.YAXDictionaryAttribute,YAXLib.Attributes.YAXCollectionAttribute,System.Boolean)">
            <summary>
            Creates a dictionary element according to the specified options, as described
            by the attribute instances.
            </summary>
            <param name="insertionLocation">The insertion location.</param>
            <param name="elementName">Name of the element.</param>
            <param name="elementValue">The element value, corresponding to a dictionary object.</param>
            <param name="dicAttrInst">reference to the dictionary attribute instance.</param>
            <param name="collectionAttrInst">reference to collection attribute instance.</param>
            <param name="dontSerializeNull"><see langword="true" /> to not serialize <see langword="null" /></param>
            <returns>
            an instance of <see cref="T:System.Xml.Linq.XElement" /> which contains the dictionary object
            serialized properly
            </returns>
        </member>
        <member name="M:YAXLib.Serialization.AddObjectToElement(System.Xml.Linq.XElement,System.Xml.Linq.XName,System.Object)">
            <summary>
            Adds an element containing data related to the specified object, to an existing xml element.
            </summary>
            <param name="elem">The parent element.</param>
            <param name="alias">The name for the element to be added.</param>
            <param name="obj">
            The object corresponding to which an element is going to be added to
            an existing parent element.
            </param>
            <returns>the enclosing XML element.</returns>
        </member>
        <member name="M:YAXLib.Serialization.MakeCollectionElement(System.Xml.Linq.XElement,System.Xml.Linq.XName,System.Object,YAXLib.Attributes.YAXCollectionAttribute,System.String)">
            <summary>
            Serializes a collection object.
            </summary>
            <param name="insertionLocation">The insertion location.</param>
            <param name="elementName">Name of the element.</param>
            <param name="elementValue">The object to be serialized.</param>
            <param name="collectionAttrInst">The collection attribute instance.</param>
            <param name="format">formatting string, which is going to be applied to all members of the collection.</param>
            <returns>
            an instance of <see cref="T:System.Xml.Linq.XElement" /> which contains the collection
            serialized properly
            </returns>
        </member>
        <member name="M:YAXLib.Serialization.AreOfSameType(System.Object,YAXLib.MemberWrapper,System.Object)">
            <summary>
            Are element value and the member declared type the same?
            </summary>
            <param name="obj"></param>
            <param name="member"></param>
            <param name="elementValue"></param>
            <returns></returns>
        </member>
        <member name="M:YAXLib.Serialization.AreOfSameType(System.Object,System.Type)">
            <summary>
            Are <paramref name="obj" />object type and type <paramref name="toCompare" /> the same?
            </summary>
            <param name="obj"></param>
            <param name="toCompare"></param>
            <returns></returns>
        </member>
        <member name="M:YAXLib.Serialization.MakeBaseElement(System.Xml.Linq.XElement,System.Xml.Linq.XName,System.Object,System.Boolean@)">
            <summary>
            Makes an XML element with the specified name, corresponding to the object specified.
            </summary>
            <param name="insertionLocation">The insertion location.</param>
            <param name="name">The name of the element.</param>
            <param name="value">The object to be serialized in an XML element.</param>
            <param name="alreadyAdded">
            If set to <see langword="true" /> specifies the element returned is
            already added to the parent element and should not be added once more.
            </param>
            <returns>
            An instance of <see cref="T:System.Xml.Linq.XElement" /> which will contain the serialized object.
            </returns>
        </member>
        <member name="M:YAXLib.Serialization.MakeBaseElement(System.Xml.Linq.XName,YAXLib.Enums.TextEmbedding,System.String)">
            <summary>
            The equivalent to the IsBasicType block of <see cref="M:YAXLib.Serialization.MakeBaseElement(System.Xml.Linq.XElement,System.Xml.Linq.XName,System.Object,System.Boolean@)" />,
            but specialized for a string field/property flagged with the <see cref="T:YAXLib.Attributes.YAXTextEmbeddingAttribute" />.
            </summary>
            <param name="name"></param>
            <param name="embedding"></param>
            <param name="value"></param>
            <returns>
            An instance of <see cref="T:System.Xml.Linq.XElement" /> which will contain the serialized object.
            </returns>
        </member>
        <member name="M:YAXLib.StringExtensions.ToBase64(System.String,System.Text.Encoding,System.Boolean)">
            <summary>
            Encodes the given text to Base64, using the given <see cref="T:System.Text.Encoding" /> (default: <see cref="P:System.Text.Encoding.UTF8" />
            </summary>
            <param name="textToEncode"></param>
            <param name="encoding">Default is <see cref="P:System.Text.Encoding.UTF8" />.</param>
            <param name="insertLineBreaks">Inserts line breaks after every 76 characters in the string representation.</param>
            <returns>The encoded string.</returns>
        </member>
        <member name="M:YAXLib.StringExtensions.FromBase64(System.String,System.Text.Encoding)">
            <summary>
            Decodes the given text from Base64, using the given <see cref="T:System.Text.Encoding" /> (default: <see cref="P:System.Text.Encoding.UTF8" />
            </summary>
            <param name="encodedText"></param>
            <param name="encoding">Default is <see cref="P:System.Text.Encoding.UTF8" />.</param>
            <returns>The decoded string.</returns>
        </member>
        <member name="T:YAXLib.StringUtils">
            <summary>
            Provides string utility methods
            </summary>
        </member>
        <member name="M:YAXLib.StringUtils.RefineLocationString(System.String)">
            <summary>
            Refines the location string. Trims it, and replaces invalid characters with underscore.
            </summary>
            <param name="elemAddr">The element address to refine.</param>
            <returns>the refined location string</returns>
        </member>
        <member name="M:YAXLib.StringUtils.LooksLikeExpandedXName(System.String)">
            <summary>
            Heuristically determines if the supplied name conforms to the "expanded XML name" form supported by the
            System.Xml.Linq.XName class.
            </summary>
            <param name="name">The name to be examined.</param>
            <returns><c>true</c> if the supplied name appears to be in expanded form, otherwise <c>false</c>.</returns>
        </member>
        <member name="M:YAXLib.StringUtils.RefineSingleElement(System.String)">
            <summary>
            Refines a single element name. Refines the location string. Trims it, and replaces invalid characters with
            underscore.
            </summary>
            <param name="elemName">Name of the element.</param>
            <returns>the refined element name</returns>
        </member>
        <member name="M:YAXLib.StringUtils.ExtractPathAndAliasFromLocationString(System.String,System.String@,System.String@)">
            <summary>
            Extracts the path and alias from location string.
            A pure path location string: level1/level2
            A location string augmented with alias: level1/level2#somename
            Here path is "level1/level2" and alias is "somename".
            </summary>
            <param name="locationString">The location string.</param>
            <param name="path">The path to be extracted.</param>
            <param name="alias">The alias to be extracted.</param>
        </member>
        <member name="M:YAXLib.StringUtils.CombineLocationAndElementName(System.String,System.Xml.Linq.XName)">
            <summary>
            Combines a location string and an element name to form a bigger location string.
            </summary>
            <param name="location">The location string.</param>
            <param name="elemName">Name of the element.</param>
            <returns>a bigger location string formed by combining a location string and an element name.</returns>
        </member>
        <member name="M:YAXLib.StringUtils.DivideLocationOneStep(System.String,System.String@,System.String@)">
            <summary>
            Divides the location string one step, to form a shorter location string.
            </summary>
            <param name="location">The location string to divide.</param>
            <param name="newLocation">The new location string which is one level shorter.</param>
            <param name="newElem">The element name removed from the end of location string.</param>
            <returns></returns>
        </member>
        <member name="M:YAXLib.StringUtils.IsLocationAllGeneric(System.String)">
            <summary>
            Determines whether the specified location is composed of levels
            which are themselves either "." or "..".
            </summary>
            <param name="location">The location string to check.</param>
            <returns>
            <c>true</c> if the specified location string is all composed of "." or ".." levels; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="M:YAXLib.StringUtils.IsSingleLocationGeneric(System.String)">
            <summary>
            Determines whether the specified location string is either "." or "..".
            </summary>
            <param name="location">The location string to check.</param>
            <returns>
            <c>true</c> if the specified location string is either "." or ".."; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="M:YAXLib.StringUtils.GetArrayDimsString(System.Int32[])">
            <summary>
            Gets the string corresponding to the given array dimensions.
            </summary>
            <param name="dims">The array dimensions.</param>
            <returns>the string corresponding to the given array dimensions</returns>
        </member>
        <member name="M:YAXLib.StringUtils.ParseArrayDimsString(System.String)">
            <summary>
            Parses the array dimensions string, and returns the corresponding dimensions array.
            </summary>
            <param name="str">The string to parse.</param>
            <returns>the dimensions array corresponding to the given string</returns>
        </member>
        <member name="M:YAXLib.StringUtils.SplitPathNamespaceSafe(System.String)">
            <summary>
            Splits a string at each instance of a '/' except where such slashes
            are within {}.
            </summary>
            <param name="value">The string to split</param>
            <returns>An enumerable set of strings which were separated by '/'</returns>
        </member>
        <member name="M:YAXLib.TypeExtensions.GetMembers(System.Type,System.Reflection.BindingFlags,System.Boolean)">
            <summary>
            Searches for the members defined for the current <see cref="T:System.Type" />,
            including the members from all <see cref="P:System.Type.BaseType" />s, using the specified binding constraints
            and <paramref name="includeBaseTypePrivateMembers" /> option.
            </summary>
            <param name="t"></param>
            <param name="bindingFlags">
            Binding flags for the type. A bitwise combination of the enumeration values that specify how the search is conducted.
            -or-
            <see cref="F:System.Reflection.BindingFlags.Default" /> to return an empty array.
            </param>
            <param name="includeBaseTypePrivateMembers">
            If set to <see langword="true" />, private fields and properties from base types are included in the search.
            </param>
            <returns>
            A list of <see cref="T:System.Reflection.MemberInfo" /> objects representing all members defined for the current <see cref="T:System.Type" />
            and its base types that match the specified binding constraints and <paramref name="includeBaseTypePrivateMembers" />
            option.
            </returns>
            <remarks>
            Both, <see cref="M:System.Type.GetProperty(System.String,System.Reflection.BindingFlags)" /> and <see cref="M:System.Type.GetMembers" />
            return private properties/members.
            <see cref="M:System.Type.GetMembers(System.Reflection.BindingFlags)" />, however, <b>does not</b> include members from <b>base types</b>,
            whereas <see cref="M:System.Type.GetProperty(System.String,System.Reflection.BindingFlags)" /> also returns private properties of base types.
            </remarks>
        </member>
        <member name="T:YAXLib.UdtWrapper">
            <summary>
            A wrapper class around user-defined types, for quick access to their YAXLib related attributes
            </summary>
        </member>
        <member name="F:YAXLib.UdtWrapper._serializerOptions">
            <summary>
            The <see cref="T:YAXLib.Options.SerializerOptions" /> to use for this instance
            and <see cref="T:YAXLib.MemberWrapper" />s created by this instance.
            </summary>
        </member>
        <member name="F:YAXLib.UdtWrapper._udtType">
            <summary>
            the underlying type for this instance of <c>TypeWrapper</c>
            </summary>
        </member>
        <member name="F:YAXLib.UdtWrapper._alias">
            <summary>
            Alias for the type
            </summary>
        </member>
        <member name="F:YAXLib.UdtWrapper._enumWrapper">
            <summary>
            reference to an instance of <c>EnumWrapper</c> in case that the current instance is an enum.
            </summary>
        </member>
        <member name="F:YAXLib.UdtWrapper._namespace">
            <summary>
            the namespace associated with this element
            </summary>
        </member>
        <member name="F:YAXLib.UdtWrapper._typeInspector">
            <summary>
            supports customization of type properties and name
            </summary>
        </member>
        <member name="M:YAXLib.UdtWrapper.#ctor(System.Type,YAXLib.Options.SerializerOptions)">
            <summary>
            Initializes a new instance of the <see cref="T:YAXLib.UdtWrapper" /> class.
            </summary>
            <param name="udtType">
            The underlying type to create the wrapper around.
            If the the type is <see cref="T:System.Nullable" />, the underlying type of the <see cref="T:System.Nullable" /> is used.
            </param>
            <param name="serializerOptions">The <see cref="T:YAXLib.Options.SerializerOptions" /> to use.</param>
        </member>
        <member name="P:YAXLib.UdtWrapper.Alias">
            <summary>
            Gets the alias of the type.
            </summary>
            <value>The alias of the type.</value>
        </member>
        <member name="P:YAXLib.UdtWrapper.Comment">
            <summary>
            Gets an array of comments for the underlying type.
            </summary>
            <value>The array of comments for the underlying type.</value>
        </member>
        <member name="P:YAXLib.UdtWrapper.FieldsToSerialize">
            <summary>
            Gets the fields to be serialized.
            </summary>
            <value>The fields to be serialized.</value>
        </member>
        <member name="P:YAXLib.UdtWrapper.IncludePrivateMembersFromBaseTypes">
            <inheritdoc cref="P:YAXLib.Attributes.YAXSerializableTypeAttribute.IncludePrivateMembersFromBaseTypes" />
            >
        </member>
        <member name="P:YAXLib.UdtWrapper.SerializationOptions">
            <summary>
            Gets the serialization options.
            </summary>
            <value>The serialization options.</value>
        </member>
        <member name="P:YAXLib.UdtWrapper.IsAttributedAsNotCollection">
            <summary>
            Gets a value indicating whether this instance is attributed as not collection.
            </summary>
            <value>
            <c>true</c> if this instance is attributed as not collection; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="P:YAXLib.UdtWrapper.HasComment">
            <summary>
            Gets a value indicating whether this instance has comment.
            </summary>
            <value>
            <c>true</c> if this instance has comment; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="P:YAXLib.UdtWrapper.UnderlyingType">
            <summary>
            Gets the underlying type corresponding to this wrapper.
            </summary>
            <value>The underlying type corresponding to this wrapper.</value>
        </member>
        <member name="P:YAXLib.UdtWrapper.IsKnownType">
            <summary>
            Gets a value indicating whether the underlying type is a known-type
            </summary>
        </member>
        <member name="P:YAXLib.UdtWrapper.KnownType">
            <summary>
            Gets the <see cref="T:YAXLib.KnownTypes.IKnownType" />.
            </summary>
        </member>
        <member name="P:YAXLib.UdtWrapper.IsEnum">
            <summary>
            Gets a value indicating whether this instance wraps around an enum.
            </summary>
            <value><c>true</c> if this instance wraps around an enum; otherwise, <c>false</c>.</value>
        </member>
        <member name="P:YAXLib.UdtWrapper.EnumWrapper">
            <summary>
            Gets the enum wrapper, provided that this instance wraps around an enum.
            </summary>
            <value>The enum wrapper, provided that this instance wraps around an enum.</value>
        </member>
        <member name="P:YAXLib.UdtWrapper.IsNotAllowedNullObjectSerialization">
            <summary>
            Determines whether serialization of null objects is not allowed.
            </summary>
            <returns>
            <c>true</c> if serialization of null objects is not allowed; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="P:YAXLib.UdtWrapper.IsNotAllowedDefaultValueSerialization">
            <summary>
            Determines whether serialization of default values is not allowed.
            </summary>
            <returns>
            <c>true</c> if serialization of default values is not allowed; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="P:YAXLib.UdtWrapper.ThrowUponSerializingCyclingReferences">
            <summary>
            Determines whether cycling references must be ignored, or an exception needs to be thrown
            </summary>
        </member>
        <member name="P:YAXLib.UdtWrapper.DoNotSerializePropertiesWithNoSetter">
            <summary>
            Determines whether properties with no setters should be serialized
            </summary>
        </member>
        <member name="P:YAXLib.UdtWrapper.SuppressMetadataAttributes">
            <summary>
            Never add YAXLib metadata attributes (e.g., 'yaxlib:realtype') to the serialized XML (even when they would be
            required for deserialization.)
            Useful when generating XML intended for another system's consumption.
            </summary>
        </member>
        <member name="P:YAXLib.UdtWrapper.IsCollectionType">
            <summary>
            Gets a value indicating whether this instance wraps around a collection type.
            </summary>
            <value>
            <c>true</c> if this instance wraps around a collection type; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="P:YAXLib.UdtWrapper.IsDictionaryType">
            <summary>
            Gets a value indicating whether this instance wraps around a dictionary type.
            </summary>
            <value>
            <c>true</c> if this instance wraps around a dictionary type; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="P:YAXLib.UdtWrapper.IsTreatedAsCollection">
            <summary>
            Gets a value indicating whether this instance is treated as collection.
            </summary>
            <value>
            <c>true</c> if this instance is treated as collection; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="P:YAXLib.UdtWrapper.IsTreatedAsDictionary">
            <summary>
            Gets a value indicating whether this instance is treated as dictionary.
            </summary>
            <value>
            <c>true</c> if this instance is treated as dictionary; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="P:YAXLib.UdtWrapper.CollectionAttributeInstance">
            <summary>
            Gets the collection attribute instance.
            </summary>
            <value>The collection attribute instance.</value>
        </member>
        <member name="P:YAXLib.UdtWrapper.DictionaryAttributeInstance">
            <summary>
            Gets the dictionary attribute instance.
            </summary>
            <value>The dictionary attribute instance.</value>
        </member>
        <member name="P:YAXLib.UdtWrapper.CustomSerializer">
            <summary>
            Gets or sets the wrapper for an <see cref="T:YAXLib.ICustomSerializer`1" /> instance.
            </summary>
            <value>The wrapper for an <see cref="T:YAXLib.ICustomSerializer`1" /> instance.</value>
        </member>
        <member name="P:YAXLib.UdtWrapper.HasCustomSerializer">
            <summary>
            Gets a value indicating whether this instance has custom serializer.
            </summary>
            <value>
            <c>true</c> if this instance has custom serializer; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="P:YAXLib.UdtWrapper.PreservesWhitespace">
            <summary>
            If <see langword="true" />, the 'xml:space="preserve"' attribute will be added to the specified element.
            </summary>
        </member>
        <member name="P:YAXLib.UdtWrapper.HasNamespace">
            <summary>
            Gets a value indicating whether this instance has a custom namespace
            defined for it through the <see cref="T:YAXLib.Attributes.YAXNamespaceAttribute" /> attribute.
            </summary>
        </member>
        <member name="P:YAXLib.UdtWrapper.Namespace">
            <summary>
            Gets the namespace associated with this element.
            </summary>
            <remarks>
            If <see cref="P:YAXLib.UdtWrapper.HasNamespace" /> is <c>false</c> then this should
            be inherited from any parent elements.
            </remarks>
        </member>
        <member name="P:YAXLib.UdtWrapper.NamespacePrefix">
            <summary>
            Gets the namespace prefix associated with this element
            </summary>
            <remarks>
            If <see cref="P:YAXLib.UdtWrapper.HasNamespace" /> is <c>false</c> then this should
            be inherited from any parent elements.
            If this is <c>null</c>, then it should be assumed that the specified
            <see cref="P:YAXLib.UdtWrapper.Namespace" /> (if it is present) is the default namespace.
            It should also be noted that if a namespace is not provided for the
            entire document (default namespace) and yet a default namespace is
            provided for one element that an exception should be thrown (since
            setting a default namespace for that element would make it apply to
            the whole document).
            </remarks>
        </member>
        <member name="M:YAXLib.UdtWrapper.ToString">
            <inheritdoc />
        </member>
        <member name="M:YAXLib.UdtWrapper.Equals(System.Object)">
            <inheritdoc />
        </member>
        <member name="M:YAXLib.UdtWrapper.GetHashCode">
            <inheritdoc />
        </member>
        <member name="M:YAXLib.UdtWrapper.SetSerializationOptionsFromAttribute(YAXLib.Enums.YAXSerializationOptions)">
            <summary>
            Used by attributes when setting <see cref="T:YAXLib.Enums.YAXSerializationOptions" />.
            </summary>
            <param name="serializationOptions"></param>
        </member>
        <member name="M:YAXLib.UdtWrapper.GetFieldsForSerialization">
            <summary>
            Gets the sequence of fields to be serialized to XML for the specified type.
            This sequence is retrieved according to the specified field types.
            <para>See also: <seealso cref="M:YAXLib.UdtWrapper.GetFieldsForDeserialization(System.Boolean)" /></para>
            </summary>
            <returns>The sequence of fields to be serialized for the specified type</returns>
        </member>
        <member name="M:YAXLib.UdtWrapper.GetFieldsForDeserialization(System.Boolean)">
            <summary>
            Gets the sequence of fields to be deserialized from XML for the specified type.
            This sequence is retrieved according to the specified field types.
            <para>See also: <seealso cref="M:YAXLib.UdtWrapper.GetFieldsForSerialization" /></para>
            </summary>
            <param name="sorted">
            If <see langword="true" /> (default), the returned fields will be sorted by
            <see cref="P:YAXLib.MemberWrapper.Order" />.
            </param>
            <returns>The sequence of fields to be deserialized for the specified type</returns>
        </member>
        <member name="M:YAXLib.UdtWrapper.GetFieldsToBeSerialized(System.Boolean)">
            <summary>
            Gets the sequence of fields to be serialized or to be deserialized for the specified type.
            This sequence is retrieved according to the field types specified by the user.
            </summary>
            <param name="sorted">
            If <see langword="true" /> (default), the returned fields will be sorted by
            <see cref="P:YAXLib.MemberWrapper.Order" />.
            </param>
            <returns>The sequence of fields to be de/serialized for the specified type</returns>
        </member>
        <member name="M:YAXLib.UdtWrapper.FindDocumentDefaultNamespace">
            <summary>
            Gets the default <see cref="T:System.Xml.Linq.XNamespace" /> for the document, it is defined,
            or an empty <see cref="T:System.Xml.Linq.XNamespace" />.
            </summary>
            <returns>
            The default <see cref="T:System.Xml.Linq.XNamespace" /> for the document, it is defined,
            or an empty <see cref="T:System.Xml.Linq.XNamespace" />.
            </returns>
        </member>
        <member name="T:YAXLib.XmlNamespaceManager">
            <summary>
            A manager that keeps a map of namespaces to their prefixes (if any) to be added ultimately to the xml result
            </summary>
        </member>
        <member name="F:YAXLib.XmlNamespaceManager._namespaceToPrefix">
            <summary>
            A map of namespaces to their prefixes (if any) to be added ultimately to the xml result
            </summary>
        </member>
        <member name="M:YAXLib.XmlNamespaceManager.Initialize">
            <summary>
            This instance will be (re-) initialized it a way
            that it has the same virgin state like an instance that
            was created with one of the CTORs.
            </summary>
        </member>
        <member name="M:YAXLib.XmlNamespaceManager.RegisterNamespace(System.Xml.Linq.XNamespace,System.String)">
            <summary>
            Registers the namespace to be added to the root element of the serialized document.
            </summary>
            <param name="ns">The namespace to be added</param>
            <param name="prefix">The prefix for the namespace.</param>
        </member>
        <member name="T:YAXLib.XMLUtils">
            <summary>
            Provides utility methods for manipulating XML.
            There are four methods for each unit. UnitExists, FindUnit, CanCreateUnit, CreateUnit
            Units are: Location, Element, and Attribute
            </summary>
        </member>
        <member name="M:YAXLib.XMLUtils.LocationExists(System.Xml.Linq.XElement,System.String)">
            <summary>
            Determines whether the location specified exists in the given XML element.
            </summary>
            <param name="baseElement">The XML element.</param>
            <param name="location">The location string.</param>
            <returns>a value indicating whether the location specified exists in the given XML element</returns>
        </member>
        <member name="M:YAXLib.XMLUtils.FindLocation(System.Xml.Linq.XElement,System.String)">
            <summary>
            Finds the location specified in the given XML element specified.
            </summary>
            <param name="baseElement">The XML element.</param>
            <param name="location">The location string.</param>
            <returns>the XML element corresponding to the specified location, or <c>null</c> if it is not found</returns>
        </member>
        <member name="M:YAXLib.XMLUtils.StripInvalidXmlChars(System.String,System.Boolean)">
            <summary>
            Strips all invalid characters from the input value, if <paramref name="enabled" /> is <see langword="true" />.
            </summary>
            <param name="input"></param>
            <param name="enabled"></param>
            <returns></returns>
        </member>
        <member name="M:YAXLib.XMLUtils.CanCreateLocation(System.Xml.Linq.XElement,System.String)">
            <summary>
            Determines whether the specified location can be created in the specified XML element.
            </summary>
            <param name="baseElement">The XML element.</param>
            <param name="location">The location string.</param>
            <returns>
            <c>true</c> if the specified location can be created in the specified XML element; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="M:YAXLib.XMLUtils.CreateLocation(System.Xml.Linq.XElement,System.String)">
            <summary>
            Creates and returns XML element corresponding to the specified location in the given XML element.
            </summary>
            <param name="baseElement">The XML element.</param>
            <param name="location">The location string.</param>
            <returns>XML element corresponding to the specified location created in the given XML element</returns>
        </member>
        <member name="M:YAXLib.XMLUtils.AttributeExists(System.Xml.Linq.XElement,System.String,System.Xml.Linq.XName)">
            <summary>
            Determines whether the attribute with the given name located in the given location string exists in the given XML
            element.
            </summary>
            <param name="baseElement">The XML element.</param>
            <param name="location">The location string.</param>
            <param name="attrName">Name of the attribute.</param>
            <returns>
            a value indicating whether the attribute with the given name located in the given location string exists in the
            given XML element.
            </returns>
        </member>
        <member name="M:YAXLib.XMLUtils.FindAttribute(System.Xml.Linq.XElement,System.String,System.Xml.Linq.XName)">
            <summary>
            Finds the attribute with the given name located in the given location string in the given XML element.
            </summary>
            <param name="baseElement">The XML element.</param>
            <param name="location">The location string.</param>
            <param name="attrName">Name of the attribute.</param>
            <returns>
            a value indicating whether the attribute with the given name located in
            the given location string in the given XML element has been found.
            </returns>
        </member>
        <member name="M:YAXLib.XMLUtils.CanCreateAttribute(System.Xml.Linq.XElement,System.String,System.Xml.Linq.XName)">
            <summary>
            Determines whether the attribute with the given name can be created in the location
            specified by the given location string in the given XML element.
            </summary>
            <param name="baseElement">The XML element.</param>
            <param name="location">The location string.</param>
            <param name="attrName">Name of the attribute.</param>
            <returns>
            <c>true</c> if the attribute with the given name can be created in the location
            specified by the given location string in the given XML element; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="M:YAXLib.XMLUtils.CreateAttribute(System.Xml.Linq.XElement,System.String,System.Xml.Linq.XName,System.Object,System.Xml.Linq.XNamespace,System.Globalization.CultureInfo)">
            <summary>
            Creates and returns the attribute with the given name in the location
            specified by the given location string in the given XML element.
            </summary>
            <param name="baseElement">The XML element.</param>
            <param name="location">The location string.</param>
            <param name="attrName">Name of the attribute.</param>
            <param name="attrValue">The value to be assigned to the attribute.</param>
            <param name="documentDefaultNamespace">The default namespace.</param>
            <param name="culture">The <see cref="T:System.Globalization.CultureInfo" /> to use for formatting the value.</param>
            <returns>
            returns the attribute with the given name in the location
            specified by the given location string in the given XML element.
            </returns>
        </member>
        <member name="M:YAXLib.XMLUtils.FindElement(System.Xml.Linq.XElement,System.String,System.Xml.Linq.XName)">
            <summary>
            Finds the element with the given name located in the given location string in the given XML element.
            </summary>
            <param name="baseElement">The XML element.</param>
            <param name="location">The location string.</param>
            <param name="elemName">Name of the element.</param>
            <returns>
            a value indicating whether the element with the given name located in
            the given location string in the given XML element has been found
            </returns>
        </member>
        <member name="M:YAXLib.XMLUtils.ElementExists(System.Xml.Linq.XElement,System.String,System.Xml.Linq.XName)">
            <summary>
            Determines whether the XML element with the given name located in the
            given location string in the given XML element exists.
            </summary>
            <param name="baseElement">The XML element.</param>
            <param name="location">The location string.</param>
            <param name="elemName">Name of the element.</param>
            <returns>
            a value indicating whether the XML element with the given name located in the
            given location string in the given XML element exists
            </returns>
        </member>
        <member name="M:YAXLib.XMLUtils.CanCreateElement(System.Xml.Linq.XElement,System.String,System.Xml.Linq.XName)">
            <summary>
            Determines whether the XML element with the given name located in the
            given location string in the given XML element can be created
            </summary>
            <param name="baseElement">The XML element.</param>
            <param name="location">The location string.</param>
            <param name="elemName">Name of the element.</param>
            <returns>
            <c>true</c> if the XML element with the given name located in the given
            location string in the given XML element can be created; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="M:YAXLib.XMLUtils.CreateElement(System.Xml.Linq.XElement,System.String,System.Xml.Linq.XName)">
            <summary>
            Creates and returns the XML element with the given name located in the
            given location string in the given XML element.
            </summary>
            <param name="baseElement">The parent XML element.</param>
            <param name="location">The location string.</param>
            <param name="elemName">Name of the element to create.</param>
            <returns>
            returns the XML element with the given name located in the
            given location string in the given XML element
            </returns>
        </member>
        <member name="M:YAXLib.XMLUtils.CreateElement(System.Xml.Linq.XElement,System.String,System.Xml.Linq.XName,System.Object)">
            <summary>
            Creates and returns the XML element with the given name located in the
            given location string in the given XML element.
            </summary>
            <param name="baseElement">The parent XML element.</param>
            <param name="location">The location string.</param>
            <param name="elemName">Name of the element to create.</param>
            <param name="elemValue">The element value to be assigned to the created element.</param>
            <returns>
            returns the XML element with the given name located in the
            given location string in the given XML element.
            </returns>
        </member>
        <member name="M:YAXLib.XMLUtils.MoveDescendants(System.Xml.Linq.XElement,System.Xml.Linq.XElement)">
            <summary>
            Moves all the children of src (including all its elements and attributes) to the
            destination element, dst.
            </summary>
            <param name="src">The source element.</param>
            <param name="dst">The destination element.</param>
        </member>
        <member name="M:YAXLib.XMLUtils.IsElementCompletelyEmpty(System.Xml.Linq.XElement)">
            <summary>
            Determines whether the specified element has neither any child attributes nor any child elements.
            </summary>
            <param name="elem">The element.</param>
            <returns>
            <c>true</c> if the specified element has neither any child attributes nor any child elements; otherwise,
            <c>false</c>.
            </returns>
        </member>
        <member name="M:YAXLib.XMLUtils.DecodeXMLString(System.String)">
            <summary>
            Decodes the XML escape sequences into normal string
            </summary>
            <param name="str">The string to decode.</param>
            <returns></returns>
        </member>
        <member name="M:YAXLib.XMLUtils.AddPreserveSpaceAttribute(System.Xml.Linq.XElement,System.Globalization.CultureInfo)">
            <summary>
            Adds the 'xml:space="preserve"' attribute to the specified element.
            </summary>
            <param name="element">Element to add the 'xml:space="preserve"' attribute to</param>
            <param name="culture">The <see cref="T:System.Globalization.CultureInfo" /> to use for string-formatting values.</param>
            <returns></returns>
        </member>
        <member name="M:YAXLib.XMLUtils.ToXmlValue(System.Object,System.Globalization.CultureInfo)">
            <summary>
            Gets the string representation of the object, or <see cref="F:System.String.Empty" /> if the object is <see langword="null" />.
            </summary>
            <param name="self">The object to get as a string.</param>
            <param name="culture">The <see cref="T:System.Globalization.CultureInfo" /> to use for culture-specific output.</param>
            <returns>
            The <see cref="T:System.Globalization.CultureInfo" />-aware string representation of the object, or <see cref="F:System.String.Empty" /> if
            the object is <see langword="null" />.
            </returns>
        </member>
        <member name="M:YAXLib.XMLUtils.AddXmlContent(System.Xml.Linq.XElement,System.Object,System.Globalization.CultureInfo)">
            <summary>
            Gets the XML content of an <see cref="T:System.Xml.Linq.XElement" /> with the value parameter formatted <see cref="T:System.Globalization.CultureInfo" />
            -specific.
            </summary>
            <param name="self">The <see cref="T:System.Xml.Linq.XElement" /></param>
            <param name="contentValue">An <see cref="T:System.Object" /> for the content value.</param>
            <param name="culture">The <see cref="T:System.Globalization.CultureInfo" /> to use for string-formatting the content value.</param>
            <returns>
            The XML content of an <see cref="T:System.Xml.Linq.XElement" /> with the value parameter formatted <see cref="T:System.Globalization.CultureInfo" />
            -specific.
            </returns>
        </member>
        <member name="T:YAXLib.YAXParsingErrors">
            <summary>
            Holds list of exception occurred during serialization/deserialization.
            </summary>
        </member>
        <member name="F:YAXLib.YAXParsingErrors._listExceptions">
            <summary>
            The list of exception occurred during serialization/deserialization.
            </summary>
        </member>
        <member name="P:YAXLib.YAXParsingErrors.Item(System.Int32)">
            <summary>
            Gets the the pair of Exception and its corresponding exception-type with the specified n.
            </summary>
            <param name="n">The index of the exception/exception type pair in the error list to return.</param>
            <value></value>
        </member>
        <member name="P:YAXLib.YAXParsingErrors.ContainsAnyError">
            <summary>
            Gets a value indicating whether the list of errors is empty or not.
            </summary>
            <value><c>true</c> if the list is not empty; otherwise, <c>false</c>.</value>
        </member>
        <member name="P:YAXLib.YAXParsingErrors.Count">
            <summary>
            Gets the number of errors within the list of errors.
            </summary>
            <value>the number of errors within the list of errors.</value>
        </member>
        <member name="M:YAXLib.YAXParsingErrors.AddException(YAXLib.Exceptions.YAXException,YAXLib.Enums.YAXExceptionTypes)">
            <summary>
            Adds an exception with the corresponding type.
            </summary>
            <param name="exception">The exception to add.</param>
            <param name="exceptionType">Type of the exception added.</param>
        </member>
        <member name="M:YAXLib.YAXParsingErrors.ClearErrors">
            <summary>
            Clears the list of errors.
            </summary>
        </member>
        <member name="M:YAXLib.YAXParsingErrors.AddRange(YAXLib.YAXParsingErrors)">
            <summary>
            Adds the list of errors within another instance of <c>YAXParsingErrors</c>.
            </summary>
            <param name="parsingErrors">The parsing errors to add its content.</param>
        </member>
        <member name="M:YAXLib.YAXParsingErrors.ToString">
            <summary>
            Returns a <see cref="T:System.String" /> that represents the current <see cref="T:System.Object" />.
            </summary>
            <returns>
            A <see cref="T:System.String" /> that represents the current <see cref="T:System.Object" />.
            </returns>
        </member>
        <member name="T:YAXLib.YAXSerializer">
            <summary>
            An XML serialization class which lets developers design the XML file structure and select the exception handling
            policy.
            This class also supports serializing most of the collection classes such as the Dictionary generic class.
            </summary>
        </member>
        <member name="M:YAXLib.YAXSerializer.#ctor">
            <summary>
            Creates a new <see cref="T:YAXLib.YAXSerializer" /> instance, that is partially initialized.
            This CTOR is used for object pooling. After creating the instance,
            <see cref="M:YAXLib.YAXSerializer.Initialize(System.Type,YAXLib.Options.SerializerOptions)" /> must be called before using it.
            The method is called by <see cref="T:YAXLib.Pooling.YAXLibPools.SerializerPool" />.
            </summary>
        </member>
        <member name="M:YAXLib.YAXSerializer.Initialize(System.Type,YAXLib.Options.SerializerOptions)">
            <summary>
            This instance will be (re-) initialized it a way
            that it has the same virgin state like an instance that
            was created with one of the public CTORs.
            </summary>
            <param name="t"></param>
            <param name="options"></param>
        </member>
        <member name="M:YAXLib.YAXSerializer.ReturnToPool">
            <summary>
            Pre-initializes this instance so that it prepared for calling
            <see cref="M:YAXLib.YAXSerializer.Initialize(System.Type,YAXLib.Options.SerializerOptions)" /> after it is
            taken from the object pool.
            The method is called by <see cref="T:YAXLib.Pooling.YAXLibPools.SerializerPool" /> on returning to the pool.
            </summary>
        </member>
        <member name="M:YAXLib.YAXSerializer.#ctor(System.Type)">
            <summary>
            Initializes a new instance of the <see cref="T:YAXLib.YAXSerializer" /> class.
            </summary>
            <param name="type">The type of the object being serialized/deserialized.</param>
        </member>
        <member name="M:YAXLib.YAXSerializer.#ctor(System.Type,YAXLib.Options.SerializerOptions)">
            <summary>
            Initializes a new instance of the <see cref="T:YAXLib.YAXSerializer" /> class.
            </summary>
            <param name="t">The type of the object being serialized/de-serialized.</param>
            <param name="options">
            The <see cref="T:YAXLib.Options.SerializerOptions" /> settings to influence the process of serialization or
            de-serialization
            </param>
        </member>
        <member name="M:YAXLib.YAXSerializer.Serialize(System.Object)">
            <summary>
            Serializes the specified object and returns a string containing the XML.
            </summary>
            <param name="obj">The object to serialize.</param>
            <returns>A <code>System.String</code> containing the XML</returns>
        </member>
        <member name="M:YAXLib.YAXSerializer.Serialize(System.Object,System.IO.TextWriter)">
            <summary>
            Serializes the specified object into a <c>TextWriter</c> instance.
            </summary>
            <param name="obj">The object to serialize.</param>
            <param name="textWriter">The <c>TextWriter</c> instance.</param>
        </member>
        <member name="M:YAXLib.YAXSerializer.Serialize(System.Object,System.Xml.XmlWriter)">
            <summary>
            Serializes the specified object into a <c>XmlWriter</c> instance.
            </summary>
            <param name="obj">The object to serialize.</param>
            <param name="xmlWriter">The <c>XmlWriter</c> instance.</param>
        </member>
        <member name="M:YAXLib.YAXSerializer.SerializeToXDocument(System.Object)">
            <summary>
            Serializes the specified object and returns an instance of <c>XDocument</c> containing the result.
            </summary>
            <param name="obj">The object to serialize.</param>
            <returns>An instance of <c>XDocument</c> containing the resulting XML</returns>
        </member>
        <member name="M:YAXLib.YAXSerializer.SerializeToFile(System.Object,System.String)">
            <summary>
            Serializes the specified object to file.
            </summary>
            <param name="obj">The object to serialize.</param>
            <param name="fileName">Path to the file.</param>
        </member>
        <member name="M:YAXLib.YAXSerializer.Deserialize(System.String)">
            <summary>
            Deserializes the specified string containing the XML serialization and returns an object.
            </summary>
            <param name="input">The input string containing the XML serialization.</param>
            <returns>The deserialized object.</returns>
        </member>
        <member name="M:YAXLib.YAXSerializer.Deserialize(System.Xml.XmlReader)">
            <summary>
            Deserializes an object while reading input from an instance of <c>XmlReader</c>.
            </summary>
            <param name="xmlReader">The <c>XmlReader</c> instance to read input from.</param>
            <returns>The deserialized object.</returns>
        </member>
        <member name="M:YAXLib.YAXSerializer.Deserialize(System.IO.TextReader)">
            <summary>
            Deserializes an object while reading input from an instance of <c>TextReader</c>.
            </summary>
            <param name="textReader">The <c>TextReader</c> instance to read input from.</param>
            <returns>The deserialized object.</returns>
        </member>
        <member name="M:YAXLib.YAXSerializer.Deserialize(System.Xml.Linq.XElement)">
            <summary>
            Deserializes an object while reading from an instance of <c>XElement</c>
            </summary>
            <param name="element">The <c>XElement</c> instance to read from.</param>
            <returns>The deserialized object</returns>
        </member>
        <member name="M:YAXLib.YAXSerializer.DeserializeFromFile(System.String)">
            <summary>
            Deserializes an object from the specified file which contains the XML serialization of the object.
            </summary>
            <param name="fileName">Path to the file.</param>
            <returns>The deserialized object.</returns>
        </member>
        <member name="M:YAXLib.YAXSerializer.SetDeserializationBaseObject(System.Object)">
            <summary>
            Sets the object used as the base object in the next stage of deserialization.
            This method enables multi-stage deserialization for YAXLib.
            </summary>
            <param name="obj">The object used as the base object in the next stage of deserialization.</param>
        </member>
        <member name="M:YAXLib.YAXSerializer.ClearCache">
            <summary>
            Clears the static caches used across all <see cref="T:YAXLib.YAXSerializer" /> instances.
            </summary>
        </member>
        <member name="P:YAXLib.YAXSerializer.Options">
            <summary>
            Gets the <see cref="T:YAXLib.Options.SerializerOptions" /> settings
            to influence the process of serialization or de-serialization of <see cref="T:YAXLib.YAXSerializer" />s.
            </summary>
        </member>
        <member name="P:YAXLib.YAXSerializer.ParsingErrors">
            <summary>
            Gets the parsing errors.
            </summary>
            <value>The parsing errors.</value>
        </member>
        <member name="M:YAXLib.YAXSerializer.GetChildSerializer(System.Type,System.Xml.Linq.XNamespace,System.Xml.Linq.XElement,YAXLib.YAXSerializer@)">
            <summary>
            Creates a new internal child <see cref="T:YAXLib.YAXSerializer" /> for recursive de/serialization.
            </summary>
            <param name="type"></param>
            <param name="namespaceToOverride"></param>
            <param name="insertionLocation"></param>
            <param name="serializer">The initialized child serializer.</param>
            <returns>
            An <see cref="T:System.IDisposable" /> <see cref="T:YAXLib.Pooling.ObjectPools.PooledObject`1" /> that will return
            the serializer to the <see cref="T:YAXLib.Pooling.YAXLibPools.SerializerPool" /> upon auto-disposal when out of scope.
            Important: Add the <see langword="using" /> declaration to the local variable.
            </returns>
            <example>
            using var serializerPooledObject
            = GetChildSerializer(type, namespaceToOverride, insertionLocation, out var serializer);
            </example>
        </member>
        <member name="M:YAXLib.YAXSerializer.InitializeAsChildSerializer(YAXLib.YAXSerializer,System.Xml.Linq.XNamespace,System.Xml.Linq.XElement)">
            <summary>
            Initialize the standard serializer as child serializer
            </summary>
            <param name="serializer"></param>
            <param name="namespaceToOverride"></param>
            <param name="insertionLocation"></param>
        </member>
        <member name="M:YAXLib.YAXSerializer.FinalizeChildSerializer(YAXLib.YAXSerializer,System.Boolean,System.Boolean)">
            <summary>
            Perform some house-keeping after the child serializer has completed.
            <para>
            Note: <b>It is not guaranteed that this method always gets called</b>,
            e.g. when de/serializing self-referencing classes (class members having
            the same type as the class), or when an exception is thrown.
            </para>
            <para>
            However, <see cref="M:YAXLib.YAXSerializer.GetChildSerializer(System.Type,System.Xml.Linq.XNamespace,System.Xml.Linq.XElement,YAXLib.YAXSerializer@)" /> will return an object that is auto-disposed
            when out of scope.
            </para>
            </summary>
            <param name="serializer"></param>
            <param name="importNamespaces"></param>
            <param name="popFromSerializationStack"></param>
        </member>
        <member name="P:YAXLib.YAXSerializer.DocumentDefaultNamespace">
            <summary>
            The main document's default namespace. This is stored so that if an attribute has the default namespace,
            it should be serialized without namespace assigned to it. Storing it here does NOT mean that elements
            and attributes without any namespace must adapt this namespace. It is just for comparison and control
            purposes.
            </summary>
        </member>
        <member name="P:YAXLib.YAXSerializer.Serialization">
            <summary>
            Get an instance of the class used for <see cref="T:YAXLib.Serialization" />.
            </summary>
        </member>
        <member name="P:YAXLib.YAXSerializer.Deserialization">
            <summary>
            Get an instance of the class used for <see cref="T:YAXLib.Deserialization" />.
            </summary>
        </member>
        <member name="P:YAXLib.YAXSerializer.IsSerializing">
            <summary>
            <see langword="true" /> if this instance is busy serializing objects, <see langword="false" /> otherwise.
            </summary>
        </member>
        <member name="P:YAXLib.YAXSerializer.SerializedStack">
            <summary>
            A collection of already serialized objects, kept for the sake of loop detection and preventing stack overflow
            exception
            </summary>
        </member>
        <member name="P:YAXLib.YAXSerializer.Type">
            <summary>
            The class or structure that is to be serialized/deserialized.
            </summary>
        </member>
        <member name="P:YAXLib.YAXSerializer.UdtWrapper">
            <summary>
            The type wrapper for the underlying type used in the serializer.
            </summary>
        </member>
        <member name="P:YAXLib.YAXSerializer.YAXLib#IRecursionCounter#RecursionCount">
            <inheritdoc />
        </member>
        <member name="P:YAXLib.YAXSerializer.XmlNamespaceManager">
            <summary>
            A manager that keeps a map of namespaces to their prefixes (if any) to be added ultimately to the xml result
            </summary>
        </member>
        <member name="T:YAXLib.YAXSerializer`1">
            <summary>
            An XML serialization class which lets developers design the XML file structure and select the exception handling
            policy.
            This class also supports serializing most of the collection classes such as the Dictionary generic class.
            </summary>
        </member>
        <member name="M:YAXLib.YAXSerializer`1.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:YAXLib.YAXSerializer" /> class.
            </summary>
        </member>
        <member name="M:YAXLib.YAXSerializer`1.#ctor(YAXLib.Options.SerializerOptions)">
            <summary>
            Initializes a new instance of the <see cref="T:YAXLib.YAXSerializer" /> class.
            </summary>
            <param name="options">
            The <see cref="T:YAXLib.Options.SerializerOptions" /> settings to influence the process of serialization or
            de-serialization
            </param>
        </member>
        <member name="P:YAXLib.YAXSerializer`1.Options">
            <summary>
            Gets the <see cref="T:YAXLib.Options.SerializerOptions" /> settings
            to influence the process of serialization or de-serialization of <see cref="T:YAXLib.YAXSerializer" />s.
            </summary>
        </member>
        <member name="P:YAXLib.YAXSerializer`1.ParsingErrors">
            <summary>
            Gets the parsing errors.
            </summary>
            <value>The parsing errors.</value>
        </member>
        <member name="M:YAXLib.YAXSerializer`1.Serialize(`0)">
            <summary>
            Serializes the specified object and returns a string containing the XML.
            </summary>
            <param name="obj">The object to serialize.</param>
            <returns>A <code>System.String</code> containing the XML</returns>
        </member>
        <member name="M:YAXLib.YAXSerializer`1.Serialize(`0,System.IO.TextWriter)">
            <summary>
            Serializes the specified object into a <c>TextWriter</c> instance.
            </summary>
            <param name="obj">The object to serialize.</param>
            <param name="textWriter">The <c>TextWriter</c> instance.</param>
        </member>
        <member name="M:YAXLib.YAXSerializer`1.Serialize(`0,System.Xml.XmlWriter)">
            <summary>
            Serializes the specified object into a <c>XmlWriter</c> instance.
            </summary>
            <param name="obj">The object to serialize.</param>
            <param name="xmlWriter">The <c>XmlWriter</c> instance.</param>
        </member>
        <member name="M:YAXLib.YAXSerializer`1.SerializeToXDocument(`0)">
            <summary>
            Serializes the specified object and returns an instance of <c>XDocument</c> containing the result.
            </summary>
            <param name="obj">The object to serialize.</param>
            <returns>An instance of <c>XDocument</c> containing the resulting XML</returns>
        </member>
        <member name="M:YAXLib.YAXSerializer`1.SerializeToFile(`0,System.String)">
            <summary>
            Serializes the specified object to file.
            </summary>
            <param name="obj">The object to serialize.</param>
            <param name="fileName">Path to the file.</param>
        </member>
        <member name="M:YAXLib.YAXSerializer`1.Deserialize(System.String)">
            <summary>
            Deserializes the specified string containing the XML serialization and returns an object.
            </summary>
            <param name="input">The input string containing the XML serialization.</param>
            <returns>The deserialized object.</returns>
        </member>
        <member name="M:YAXLib.YAXSerializer`1.Deserialize(System.Xml.XmlReader)">
            <summary>
            Deserializes an object while reading input from an instance of <c>XmlReader</c>.
            </summary>
            <param name="xmlReader">The <c>XmlReader</c> instance to read input from.</param>
            <returns>The deserialized object.</returns>
        </member>
        <member name="M:YAXLib.YAXSerializer`1.Deserialize(System.IO.TextReader)">
            <summary>
            Deserializes an object while reading input from an instance of <c>TextReader</c>.
            </summary>
            <param name="textReader">The <c>TextReader</c> instance to read input from.</param>
            <returns>The deserialized object.</returns>
        </member>
        <member name="M:YAXLib.YAXSerializer`1.Deserialize(System.Xml.Linq.XElement)">
            <summary>
            Deserializes an object while reading from an instance of <c>XElement</c>
            </summary>
            <param name="element">The <c>XElement</c> instance to read from.</param>
            <returns>The deserialized object</returns>
        </member>
        <member name="M:YAXLib.YAXSerializer`1.DeserializeFromFile(System.String)">
            <summary>
            Deserializes an object from the specified file which contains the XML serialization of the object.
            </summary>
            <param name="fileName">Path to the file.</param>
            <returns>The deserialized object.</returns>
        </member>
        <member name="M:YAXLib.YAXSerializer`1.SetDeserializationBaseObject(`0)">
            <summary>
            Sets the object used as the base object in the next stage of de-serialization.
            This method enables multi-stage de-serialization for YAXLib.
            </summary>
            <param name="obj">The object used as the base object in the next stage of de-serialization.</param>
        </member>
    </members>
</doc>
